Regimes Graph:
To test Herbie's adaptability across different input ranges, we first run Herbie on a program A with a constrained input range to get some output program X. We then rerun Herbie with an expanded range for the same mathematical expression to get an output program Y. Y is better than X by on average 23.971 bits for double-precision floating point numbers (running on the hamming suite from fpbench). Expanded Error is the error of the expanded program without Herbie's optimizations. Expanded Base Error is the error of Herbie's output program for the constrained input range on the expanded input range. Expanded Output Error is the error of Herbie's output program on the expanded input range.

Representations Graph:
To test Herbie's adaptability across different number representation formats, we do the following test. First run Herbie in each representation to get what Herbie determines is the optimal program for each representation. Then convert each of those representations' operations to each representation and check to see which has the lowest error. (e.g. convert the double and posit operations that herbie produces when optimizing for a double and posit programs into single operations and then compare each program to see which performs best.) Each color represents the type of the operations we are running the program and each label on the x-axis represents the representation that when optimized for, produces the best result for that representation on a given test.
Note that this graph currently doesn't take into account how much of a difference there is the accuracy, just which representation when optimized for, gives us the best result, so it can be a bit misleading as, when looking through the results individually, the cases where a different representation, when optimized for, is best, tends to have a difference of just a few bits, whereas when the representation we are running the test in is the best when optimized for, the difference is often significantly larger (not uncommon to see 20 or more bits).
