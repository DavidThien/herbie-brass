Running Herbie on 29 tests (seed: 1732014778)...
Now running test: Maksimov and Kolovsky, Equation (3)
Starting program: (λ (J K U) (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))))
Precision double result: (λ (J K U) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) -inf.0) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) 4.15875554161731e+296) (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (J K U) (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))))
'(λ (J K U) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) -inf.0) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) 4.15875554161731e+296) (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))))))
#f
#f
'(λ (J K U) (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))))
'(λ (J K U) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) -inf.0) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) 4.15875554161731e+296) (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))))))
#f
#f
'(λ (J K U) (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))))
'(λ (J K U) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) -inf.0) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))) (if (<= (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) 4.15875554161731e+296) (* (* (* J -2) (cos (/ K 2))) (sqrt (+ (pow (/ U (* (* J 2) (cos (/ K 2)))) 2) 1))) (* (* (/ U (* (cos (* 1/2 K)) J)) 1/2) (* (* J -2) (cos (/ K 2)))))))
#f
#f
|       |start prog|double|single|posit16|
|double |16.8873020|13.438|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Maksimov and Kolovsky, Equation (4)
Starting program: (λ (J l K U) (+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2))) U))
Precision double result: (λ (J l K U) (+ U (* (cos (/ K 2)) (* (* J l) 2))))
Precision single result: (λ (J l K U) (+ (* (* J l) 2) U))
Precision posit16 timed out or failed
'(λ (J l K U) (+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2))) U))
'(λ (J l K U) (+ U (* (cos (/ K 2)) (* (* J l) 2))))
'(λ (J l K U) (+ (* (* J l) 2) U))
#f
'(λ (J l K U) (+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2))) U))
'(λ (J l K U) (+ U (* (cos (/ K 2)) (* (* J l) 2))))
'(λ (J l K U) (+ (* (* J l) 2) U))
#f
'(λ (J l K U) (+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2))) U))
'(λ (J l K U) (+ U (* (cos (/ K 2)) (* (* J l) 2))))
'(λ (J l K U) (+ (* (* J l) 2) U))
#f
|       |start prog|double|single|posit16|
|double |17.0943137|0.6498|9.0430|#f     |
|single |18.9766132|18.806|9.6584|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Maksimov and Kolovsky, Equation (32)
Starting program: (λ (K m n M l) (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))))
Precision double result: (λ (K m n M l) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (K m n M l) (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))))
'(λ (K m n M l) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n))))))
#f
#f
'(λ (K m n M l) (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))))
'(λ (K m n M l) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n))))))
#f
#f
'(λ (K m n M l) (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))))
'(λ (K m n M l) (exp (- (- (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n))))))
#f
#f
|       |start prog|double|single|posit16|
|double |15.2066230|1.3186|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Bulmash initializePoisson
Starting program: (λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT))))))
Precision double result: (λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (pow (exp (* (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)) (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)))) (/ (cbrt (+ (+ EDonor mu) (- Vef Ec))) (cbrt KbT))))) (/ NaChar (+ (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)) 1))))
Precision single result: (λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar 2) (/ NaChar 2)))
Precision posit16 timed out or failed
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT))))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (pow (exp (* (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)) (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)))) (/ (cbrt (+ (+ EDonor mu) (- Vef Ec))) (cbrt KbT))))) (/ NaChar (+ (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)) 1))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar 2) (/ NaChar 2)))
#f
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT))))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (pow (exp (* (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)) (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)))) (/ (cbrt (+ (+ EDonor mu) (- Vef Ec))) (cbrt KbT))))) (/ NaChar (+ (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)) 1))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar 2) (/ NaChar 2)))
#f
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT))))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar (+ 1 (pow (exp (* (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)) (cbrt (/ (+ (+ EDonor mu) (- Vef Ec)) KbT)))) (/ (cbrt (+ (+ EDonor mu) (- Vef Ec))) (cbrt KbT))))) (/ NaChar (+ (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)) 1))))
'(λ (NdChar Ec Vef EDonor mu KbT NaChar Ev EAccept) (+ (/ NdChar 2) (/ NaChar 2)))
#f
|       |start prog|double|single|posit16|
|double |0.01389809|0.0164|46.050|#f     |
|single |26.7450998|26.745|18.089|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Migdal et al, Equation (51)
Starting program: (λ (k n) (* (/ 1 (sqrt k)) (pow (* (* 2 PI) n) (/ (- 1 k) 2))))
Precision double result: (λ (k n) (* (sqrt (pow (* (* n PI) 2) (/ (- 1 k) 2))) (/ (sqrt (pow (* (* 2 n) PI) (/ (- 1 k) 2))) (sqrt k))))
Precision single result: (λ (k n) (* (/ 1 (sqrt k)) (pow (* n (* PI 2)) (/ (- 1 k) 2))))
Precision posit16 timed out or failed
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* (* 2 PI) n) (/ (- 1 k) 2))))
'(λ (k n) (* (sqrt (pow (* (* n PI) 2) (/ (- 1 k) 2))) (/ (sqrt (pow (* (* 2 n) PI) (/ (- 1 k) 2))) (sqrt k))))
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* n (* PI 2)) (/ (- 1 k) 2))))
#f
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* (* 2 PI) n) (/ (- 1 k) 2))))
'(λ (k n) (* (sqrt (pow (* (* n PI) 2) (/ (- 1 k) 2))) (/ (sqrt (pow (* (* 2 n) PI) (/ (- 1 k) 2))) (sqrt k))))
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* n (* PI 2)) (/ (- 1 k) 2))))
#f
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* (* 2 PI) n) (/ (- 1 k) 2))))
'(λ (k n) (* (sqrt (pow (* (* n PI) 2) (/ (- 1 k) 2))) (/ (sqrt (pow (* (* 2 n) PI) (/ (- 1 k) 2))) (sqrt k))))
'(λ (k n) (* (/ 1 (sqrt k)) (pow (* n (* PI 2)) (/ (- 1 k) 2))))
#f
|       |start prog|double|single|posit16|
|double |0.49202512|0.6055|0.4920|#f     |
|single |10.2600930|10.263|10.260|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Migdal et al, Equation (64)
Starting program: (λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))))
Precision double result: (λ (a1 a2 th) (* (+ (* a2 a2) (* a1 a1)) (/ (/ (cos th) (sqrt (sqrt 2))) (sqrt (sqrt 2)))))
Precision single result: (λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a2 a2)) (* (* a1 a1) (/ (+ (log (sqrt (exp (cos th)))) (log (sqrt (exp (cos th))))) (sqrt 2)))))
Precision posit16 timed out or failed
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))))
'(λ (a1 a2 th) (* (+ (* a2 a2) (* a1 a1)) (/ (/ (cos th) (sqrt (sqrt 2))) (sqrt (sqrt 2)))))
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a2 a2)) (* (* a1 a1) (/ (+ (log (sqrt (exp (cos th)))) (log (sqrt (exp (cos th))))) (sqrt 2)))))
#f
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))))
'(λ (a1 a2 th) (* (+ (* a2 a2) (* a1 a1)) (/ (/ (cos th) (sqrt (sqrt 2))) (sqrt (sqrt 2)))))
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a2 a2)) (* (* a1 a1) (/ (+ (log (sqrt (exp (cos th)))) (log (sqrt (exp (cos th))))) (sqrt 2)))))
#f
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))))
'(λ (a1 a2 th) (* (+ (* a2 a2) (* a1 a1)) (/ (/ (cos th) (sqrt (sqrt 2))) (sqrt (sqrt 2)))))
'(λ (a1 a2 th) (+ (* (/ (cos th) (sqrt 2)) (* a2 a2)) (* (* a1 a1) (/ (+ (log (sqrt (exp (cos th)))) (log (sqrt (exp (cos th))))) (sqrt 2)))))
#f
|       |start prog|double|single|posit16|
|double |0.52602159|0.4817|0.6679|#f     |
|single |14.1360280|14.160|14.138|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Falkner and Boettcher, Equation (20:1,3)
Starting program: (λ (v t) (/ (- 1 (* 5 (* v v))) (* (* (* PI t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))))
Precision double result: (λ (v t) (* (/ (- 1 (* 5 (* v v))) (- 1 (* v v))) (* (/ 1 t) (/ (/ 1 PI) (sqrt (+ (* (* v -6) v) 2))))))
Precision single result: (λ (v t) (* (/ (cbrt (+ (* -5 (* v v)) 1)) (* (cbrt (- 1 (* v v))) (sqrt (+ 2 (* -6 (* v v)))))) (/ (/ (* (cbrt (- 1 (* (* 5 v) v))) (cbrt (- 1 (* (* 5 v) v)))) (* (cbrt (- 1 (* v v))) (cbrt (- 1 (* v v))))) (* t PI))))
Precision posit16 timed out or failed
'(λ (v t) (/ (- 1 (* 5 (* v v))) (* (* (* PI t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))))
'(λ (v t) (* (/ (- 1 (* 5 (* v v))) (- 1 (* v v))) (* (/ 1 t) (/ (/ 1 PI) (sqrt (+ (* (* v -6) v) 2))))))
'(λ (v t) (* (/ (cbrt (+ (* -5 (* v v)) 1)) (* (cbrt (- 1 (* v v))) (sqrt (+ 2 (* -6 (* v v)))))) (/ (/ (* (cbrt (- 1 (* (* 5 v) v))) (cbrt (- 1 (* (* 5 v) v)))) (* (cbrt (- 1 (* v v))) (cbrt (- 1 (* v v))))) (* t PI))))
#f
'(λ (v t) (/ (- 1 (* 5 (* v v))) (* (* (* PI t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))))
'(λ (v t) (* (/ (- 1 (* 5 (* v v))) (- 1 (* v v))) (* (/ 1 t) (/ (/ 1 PI) (sqrt (+ (* (* v -6) v) 2))))))
'(λ (v t) (* (/ (cbrt (+ (* -5 (* v v)) 1)) (* (cbrt (- 1 (* v v))) (sqrt (+ 2 (* -6 (* v v)))))) (/ (/ (* (cbrt (- 1 (* (* 5 v) v))) (cbrt (- 1 (* (* 5 v) v)))) (* (cbrt (- 1 (* v v))) (cbrt (- 1 (* v v))))) (* t PI))))
#f
'(λ (v t) (/ (- 1 (* 5 (* v v))) (* (* (* PI t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))))
'(λ (v t) (* (/ (- 1 (* 5 (* v v))) (- 1 (* v v))) (* (/ 1 t) (/ (/ 1 PI) (sqrt (+ (* (* v -6) v) 2))))))
'(λ (v t) (* (/ (cbrt (+ (* -5 (* v v)) 1)) (* (cbrt (- 1 (* v v))) (sqrt (+ 2 (* -6 (* v v)))))) (/ (/ (* (cbrt (- 1 (* (* 5 v) v))) (cbrt (- 1 (* (* 5 v) v)))) (* (cbrt (- 1 (* v v))) (cbrt (- 1 (* v v))))) (* t PI))))
#f
|       |start prog|double|single|posit16|
|double |0.44952412|0.2833|0.4960|#f     |
|single |0.26495372|0.2844|0.2656|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Falkner and Boettcher, Equation (22+)
Starting program: (λ (v) (/ 4 (* (* (* 3 PI) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))))
Precision double result: (λ (v) (/ (/ (/ 4/3 PI) (- 1 (* v v))) (sqrt (- 2 (* (* 6 v) v)))))
Precision single result: (λ (v) (/ 4 (* (sqrt (- 2 (* (* v v) 6))) (* (- 1 (pow v 2)) (* PI 3)))))
Precision posit16 timed out or failed
'(λ (v) (/ 4 (* (* (* 3 PI) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))))
'(λ (v) (/ (/ (/ 4/3 PI) (- 1 (* v v))) (sqrt (- 2 (* (* 6 v) v)))))
'(λ (v) (/ 4 (* (sqrt (- 2 (* (* v v) 6))) (* (- 1 (pow v 2)) (* PI 3)))))
#f
'(λ (v) (/ 4 (* (* (* 3 PI) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))))
'(λ (v) (/ (/ (/ 4/3 PI) (- 1 (* v v))) (sqrt (- 2 (* (* 6 v) v)))))
'(λ (v) (/ 4 (* (sqrt (- 2 (* (* v v) 6))) (* (- 1 (pow v 2)) (* PI 3)))))
#f
'(λ (v) (/ 4 (* (* (* 3 PI) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))))
'(λ (v) (/ (/ (/ 4/3 PI) (- 1 (* v v))) (sqrt (- 2 (* (* 6 v) v)))))
'(λ (v) (/ 4 (* (sqrt (- 2 (* (* v v) 6))) (* (- 1 (pow v 2)) (* PI 3)))))
#f
|       |start prog|double|single|posit16|
|double |0.98377124|0.0114|0.9837|#f     |
|single |0.00663003|0.0056|0.0038|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Falkner and Boettcher, Appendix A
Starting program: (λ (a k m) (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))))
Precision double result: (λ (a k m) (* (/ 1 (+ 1 (* (+ 10 k) k))) (* (pow k m) a)))
Precision single result: (λ (a k m) (/ (* (pow k m) a) (+ (* (* k (cbrt (+ 10 k))) (* (cbrt (+ 10 k)) (cbrt (+ 10 k)))) 1)))
Precision posit16 timed out or failed
'(λ (a k m) (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))))
'(λ (a k m) (* (/ 1 (+ 1 (* (+ 10 k) k))) (* (pow k m) a)))
'(λ (a k m) (/ (* (pow k m) a) (+ (* (* k (cbrt (+ 10 k))) (* (cbrt (+ 10 k)) (cbrt (+ 10 k)))) 1)))
#f
'(λ (a k m) (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))))
'(λ (a k m) (* (/ 1 (+ 1 (* (+ 10 k) k))) (* (pow k m) a)))
'(λ (a k m) (/ (* (pow k m) a) (+ (* (* k (cbrt (+ 10 k))) (* (cbrt (+ 10 k)) (cbrt (+ 10 k)))) 1)))
#f
'(λ (a k m) (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))))
'(λ (a k m) (* (/ 1 (+ 1 (* (+ 10 k) k))) (* (pow k m) a)))
'(λ (a k m) (/ (* (pow k m) a) (+ (* (* k (cbrt (+ 10 k))) (* (cbrt (+ 10 k)) (cbrt (+ 10 k)))) 1)))
#f
|       |start prog|double|single|posit16|
|double |1.97622580|1.9682|2.0511|#f     |
|single |13.8399217|11.736|11.709|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Falkner and Boettcher, Appendix B, 1
Starting program: (λ (v) (acos (/ (- 1 (* 5 (* v v))) (- (* v v) 1))))
Precision double result: (λ (v) (pow (exp (sqrt (log (acos (/ (+ (* -5 (* v v)) 1) (+ -1 (* v v))))))) (sqrt (log (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3))))))))))
Precision single result: (λ (v) (- (/ PI 2) (asin (/ (- 1 (* 5 (* v v))) (- (* v v) 1)))))
Precision posit16 timed out or failed
'(λ (v) (acos (/ (- 1 (* 5 (* v v))) (- (* v v) 1))))
'(λ (v) (pow (exp (sqrt (log (acos (/ (+ (* -5 (* v v)) 1) (+ -1 (* v v))))))) (sqrt (log (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3))))))))))
'(λ (v) (- (/ PI 2) (asin (/ (- 1 (* 5 (* v v))) (- (* v v) 1)))))
#f
'(λ (v) (acos (/ (- 1 (* 5 (* v v))) (- (* v v) 1))))
'(λ (v) (pow (exp (sqrt (log (acos (/ (+ (* -5 (* v v)) 1) (+ -1 (* v v))))))) (sqrt (log (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3))))))))))
'(λ (v) (- (/ PI 2) (asin (/ (- 1 (* 5 (* v v))) (- (* v v) 1)))))
#f
'(λ (v) (acos (/ (- 1 (* 5 (* v v))) (- (* v v) 1))))
'(λ (v) (pow (exp (sqrt (log (acos (/ (+ (* -5 (* v v)) 1) (+ -1 (* v v))))))) (sqrt (log (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (* (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3)))) (cbrt (acos (cbrt (pow (/ (+ (* -5 (* v v)) 1) (- (* v v) 1)) 3))))))))))
'(λ (v) (- (/ PI 2) (asin (/ (- 1 (* 5 (* v v))) (- (* v v) 1)))))
#f
|       |start prog|double|single|posit16|
|double |0.54380983|0.5676|0.5440|#f     |
|single |0.10522520|0.1165|0.1052|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Falkner and Boettcher, Appendix B, 2
Starting program: (λ (v) (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))))
Precision double result: (λ (v) (* (log (exp (* (sqrt (- 1 (* 3 (* v v)))) (/ (sqrt 2) 4)))) (- 1 (* v v))))
Precision single result: (λ (v) (* (* (sqrt (- 1 (log (exp (* 3 (* v v)))))) (/ (sqrt 2) 4)) (- 1 (* v v))))
Precision posit16 result: (λ (v) (*.p16 (*.p16 (/.p16 (sqrt.p16 (real->posit16 2.0)) (real->posit16 4.0)) (sqrt.p16 (-.p16 (real->posit16 1.0) (*.p16 (*.p16 (real->posit16 3.0) v) v)))) (-.p16 (real->posit16 1.0) (*.p16 v v))))
'(λ (v) (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))))
'(λ (v) (* (log (exp (* (sqrt (- 1 (* 3 (* v v)))) (/ (sqrt 2) 4)))) (- 1 (* v v))))
'(λ (v) (* (* (sqrt (- 1 (log (exp (* 3 (* v v)))))) (/ (sqrt 2) 4)) (- 1 (* v v))))
'(λ (v) (*.p16 (*.p16 (/.p16 (sqrt.p16 (real->posit16 2.0)) (real->posit16 4.0)) (sqrt.p16 (-.p16 (real->posit16 1.0) (*.p16 (*.p16 (real->posit16 3.0) v) v)))) (-.p16 (real->posit16 1.0) (*.p16 v v))))
'(λ (v) (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))))
'(λ (v) (* (log (exp (* (sqrt (- 1 (* 3 (* v v)))) (/ (sqrt 2) 4)))) (- 1 (* v v))))
'(λ (v) (* (* (sqrt (- 1 (log (exp (* 3 (* v v)))))) (/ (sqrt 2) 4)) (- 1 (* v v))))
'(λ (v) (*.p16 (*.p16 (/.p16 (sqrt.p16 (real->posit16 2.0)) (real->posit16 4.0)) (sqrt.p16 (-.p16 (real->posit16 1.0) (*.p16 (*.p16 (real->posit16 3.0) v) v)))) (-.p16 (real->posit16 1.0) (*.p16 v v))))
'(λ (v) (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))))
'(λ (v) (* (log (exp (* (sqrt (- 1 (* 3 (* v v)))) (/ (sqrt 2) 4)))) (- 1 (* v v))))
'(λ (v) (* (* (sqrt (- 1 (log (exp (* 3 (* v v)))))) (/ (sqrt 2) 4)) (- 1 (* v v))))
'(λ (v) (*.p16 (*.p16 (/.p16 (sqrt.p16 (real->posit16 2.0)) (real->posit16 4.0)) (sqrt.p16 (-.p16 (real->posit16 1.0) (*.p16 (*.p16 (real->posit16 3.0) v) v)))) (-.p16 (real->posit16 1.0) (*.p16 v v))))
|       |start prog|double|single|posit16|
|double |0.01221936|0.0194|0.0147|0.01221|
|single |0.00466524|0.0077|0.0034|0.00429|
|posit16|1.73029921|#f    |#f    |1.73580|

Now running test: Toniolo and Linder, Equation (2)
Starting program: (λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))))))
Precision double result: (λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* (pow (/ t l) 2) 2))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))))))
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* (pow (/ t l) 2) 2))))))
#f
#f
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))))))
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* (pow (/ t l) 2) 2))))))
#f
#f
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))))))
'(λ (t l Om Omc) (asin (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* (pow (/ t l) 2) 2))))))
#f
#f
|       |start prog|double|single|posit16|
|double |9.91170750|9.9117|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Toniolo and Linder, Equation (3a)
Starting program: (λ (l Om kx ky) (sqrt (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))))))))))
Precision double result: (λ (l Om kx ky) (sqrt (* 1/2 (+ (log (exp (/ 1 (sqrt (+ (* (pow (/ (* l 2) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))) 1))))) 1))))
Precision single result: (λ (l Om kx ky) (sqrt (+ (/ 1/2 (sqrt (+ (* (+ (* (sin ky) (sin ky)) (* (sin kx) (sin kx))) (* (* (/ l Om) 2) (* (/ l Om) 2))) 1))) 1/2)))
Precision posit16 timed out or failed
'(λ (l Om kx ky) (sqrt (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))))))))))
'(λ (l Om kx ky) (sqrt (* 1/2 (+ (log (exp (/ 1 (sqrt (+ (* (pow (/ (* l 2) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))) 1))))) 1))))
'(λ (l Om kx ky) (sqrt (+ (/ 1/2 (sqrt (+ (* (+ (* (sin ky) (sin ky)) (* (sin kx) (sin kx))) (* (* (/ l Om) 2) (* (/ l Om) 2))) 1))) 1/2)))
#f
'(λ (l Om kx ky) (sqrt (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))))))))))
'(λ (l Om kx ky) (sqrt (* 1/2 (+ (log (exp (/ 1 (sqrt (+ (* (pow (/ (* l 2) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))) 1))))) 1))))
'(λ (l Om kx ky) (sqrt (+ (/ 1/2 (sqrt (+ (* (+ (* (sin ky) (sin ky)) (* (sin kx) (sin kx))) (* (* (/ l Om) 2) (* (/ l Om) 2))) 1))) 1/2)))
#f
'(λ (l Om kx ky) (sqrt (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))))))))))
'(λ (l Om kx ky) (sqrt (* 1/2 (+ (log (exp (/ 1 (sqrt (+ (* (pow (/ (* l 2) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2))) 1))))) 1))))
'(λ (l Om kx ky) (sqrt (+ (/ 1/2 (sqrt (+ (* (+ (* (sin ky) (sin ky)) (* (sin kx) (sin kx))) (* (* (/ l Om) 2) (* (/ l Om) 2))) 1))) 1/2)))
#f
|       |start prog|double|single|posit16|
|double |1.05177305|1.0522|1.0517|#f     |
|single |26.1917011|26.191|25.901|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Toniolo and Linder, Equation (3b), real
Starting program: (λ (kx ky th) (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)))
Precision double result: (λ (kx ky th) (if (<= (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2)))) 1.0) (* (/ 1 (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (* (/ (sin ky) (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (sin th))) (/ (* (sin th) (sin ky)) (- (+ (* 1/12 (* (pow ky 2) kx)) kx) (* (pow kx 3) 1/6)))))
Precision single result: (λ (kx ky th) (* (sin th) (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))))
Precision posit16 timed out or failed
'(λ (kx ky th) (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)))
'(λ (kx ky th) (if (<= (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2)))) 1.0) (* (/ 1 (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (* (/ (sin ky) (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (sin th))) (/ (* (sin th) (sin ky)) (- (+ (* 1/12 (* (pow ky 2) kx)) kx) (* (pow kx 3) 1/6)))))
'(λ (kx ky th) (* (sin th) (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))))
#f
'(λ (kx ky th) (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)))
'(λ (kx ky th) (if (<= (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2)))) 1.0) (* (/ 1 (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (* (/ (sin ky) (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (sin th))) (/ (* (sin th) (sin ky)) (- (+ (* 1/12 (* (pow ky 2) kx)) kx) (* (pow kx 3) 1/6)))))
'(λ (kx ky th) (* (sin th) (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))))
#f
'(λ (kx ky th) (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)))
'(λ (kx ky th) (if (<= (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2)))) 1.0) (* (/ 1 (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (* (/ (sin ky) (sqrt (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (sin th))) (/ (* (sin th) (sin ky)) (- (+ (* 1/12 (* (pow ky 2) kx)) kx) (* (pow kx 3) 1/6)))))
'(λ (kx ky th) (* (sin th) (/ (sin ky) (sqrt (+ (pow (sin ky) 2) (pow (sin kx) 2))))))
#f
|       |start prog|double|single|posit16|
|double |4.03230216|4.5391|4.0323|#f     |
|single |29.2611308|28.999|29.261|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Toniolo and Linder, Equation (7)
Starting program: (λ (x l t) (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))))
Precision double result: (λ (x l t) (if (<= t -4.11797859967824e+77) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t -2.4558359313516084e-133) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (if (<= t -5.929155307325849e-219) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t 7.611034348804512e+33) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (/ (* t (sqrt 2)) (+ (- (* (/ (/ 2 x) (sqrt 2)) (+ t (/ t x))) (/ t (* (* x x) (sqrt 2)))) (* t (sqrt 2)))))))))
Precision single timed out or failed
Precision posit16 result: (λ (x l t) (/.p16 (*.p16 (sqrt.p16 (real->posit16 2.0)) t) (sqrt.p16 (+.p16 (*.p16 l (/.p16 (+.p16 (*.p16 l x) l) (-.p16 x (real->posit16 1.0)))) (-.p16 (*.p16 (real->posit16 2.0) (*.p16 t (*.p16 t (/.p16 (+.p16 x (real->posit16 1.0)) (-.p16 x (real->posit16 1.0)))))) (*.p16 l l))))))
'(λ (x l t) (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))))
'(λ (x l t) (if (<= t -4.11797859967824e+77) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t -2.4558359313516084e-133) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (if (<= t -5.929155307325849e-219) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t 7.611034348804512e+33) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (/ (* t (sqrt 2)) (+ (- (* (/ (/ 2 x) (sqrt 2)) (+ t (/ t x))) (/ t (* (* x x) (sqrt 2)))) (* t (sqrt 2)))))))))
#f
'(λ (x l t) (/.p16 (*.p16 (sqrt.p16 (real->posit16 2.0)) t) (sqrt.p16 (+.p16 (*.p16 l (/.p16 (+.p16 (*.p16 l x) l) (-.p16 x (real->posit16 1.0)))) (-.p16 (*.p16 (real->posit16 2.0) (*.p16 t (*.p16 t (/.p16 (+.p16 x (real->posit16 1.0)) (-.p16 x (real->posit16 1.0)))))) (*.p16 l l))))))
'(λ (x l t) (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))))
'(λ (x l t) (if (<= t -4.11797859967824e+77) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t -2.4558359313516084e-133) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (if (<= t -5.929155307325849e-219) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t 7.611034348804512e+33) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (/ (* t (sqrt 2)) (+ (- (* (/ (/ 2 x) (sqrt 2)) (+ t (/ t x))) (/ t (* (* x x) (sqrt 2)))) (* t (sqrt 2)))))))))
#f
'(λ (x l t) (/.p16 (*.p16 (sqrt.p16 (real->posit16 2.0)) t) (sqrt.p16 (+.p16 (*.p16 l (/.p16 (+.p16 (*.p16 l x) l) (-.p16 x (real->posit16 1.0)))) (-.p16 (*.p16 (real->posit16 2.0) (*.p16 t (*.p16 t (/.p16 (+.p16 x (real->posit16 1.0)) (-.p16 x (real->posit16 1.0)))))) (*.p16 l l))))))
'(λ (x l t) (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))))
'(λ (x l t) (if (<= t -4.11797859967824e+77) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t -2.4558359313516084e-133) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (if (<= t -5.929155307325849e-219) (/ (* t (sqrt 2)) (- (* (- (/ t 2) t) (/ (/ 2 x) (* (sqrt 2) x))) (* (+ (/ (/ 2 x) (sqrt 2)) (sqrt 2)) t))) (if (<= t 7.611034348804512e+33) (/ (* (sqrt (sqrt 2)) (* (sqrt (sqrt 2)) t)) (sqrt (+ (/ (* 2 l) (/ x l)) (* (+ (/ 4 x) 2) (* t t))))) (/ (* t (sqrt 2)) (+ (- (* (/ (/ 2 x) (sqrt 2)) (+ t (/ t x))) (/ t (* (* x x) (sqrt 2)))) (* t (sqrt 2)))))))))
