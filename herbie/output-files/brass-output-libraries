Running Herbie on 50 tests (seed: 1573855182)...
Now running test: FastMath dist
Starting program: (λ (d1 d2 d3) (+ (* d1 d2) (* d1 d3)))
Precision double result: (λ (d1 d2 d3) (+ (* d3 d1) (* d2 d1)))
Precision single result: (λ (d1 d2 d3) 0)
Precision posit16 timed out or failed
'(λ (d1 d2 d3) (+ (* d1 d2) (* d1 d3)))
'(λ (d1 d2 d3) (+ (* d3 d1) (* d2 d1)))
'(λ (d1 d2 d3) 0)
#f
'(λ (d1 d2 d3) (+ (* d1 d2) (* d1 d3)))
'(λ (d1 d2 d3) (+ (* d3 d1) (* d2 d1)))
'(λ (d1 d2 d3) 0)
#f
'(λ (d1 d2 d3) (+ (* d1 d2) (* d1 d3)))
'(λ (d1 d2 d3) (+ (* d3 d1) (* d2 d1)))
'(λ (d1 d2 d3) 0)
#f
|       |start prog|double|single|posit16|
|double |0.01584436|0.0158|58.884|#f     |
|single |17.1604595|17.160|9.1859|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath test1
Starting program: (λ (d) (+ (* d 10) (* d 20)))
Precision double result: (λ (d) (* 30 d))
Precision single result: (λ (d) (* 30 d))
Precision posit16 timed out or failed
'(λ (d) (+ (* d 10) (* d 20)))
'(λ (d) (* 30 d))
'(λ (d) (* 30 d))
#f
'(λ (d) (+ (* d 10) (* d 20)))
'(λ (d) (* 30 d))
'(λ (d) (* 30 d))
#f
'(λ (d) (+ (* d 10) (* d 20)))
'(λ (d) (* 30 d))
'(λ (d) (* 30 d))
#f
|       |start prog|double|single|posit16|
|double |0.265625  |0     |0     |#f     |
|single |0.14822769|0.1161|0.1161|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath test2
Starting program: (λ (d1 d2) (+ (+ (* d1 10) (* d1 d2)) (* d1 20)))
Precision double result: (λ (d1 d2) (* (+ d2 30) d1))
Precision single result: (λ (d1 d2) (* d1 (exp (log (/ 30 (pow (exp d2) (+ -1/30 (* d2 1/1800))))))))
Precision posit16 timed out or failed
'(λ (d1 d2) (+ (+ (* d1 10) (* d1 d2)) (* d1 20)))
'(λ (d1 d2) (* (+ d2 30) d1))
'(λ (d1 d2) (* d1 (exp (log (/ 30 (pow (exp d2) (+ -1/30 (* d2 1/1800))))))))
#f
'(λ (d1 d2) (+ (+ (* d1 10) (* d1 d2)) (* d1 20)))
'(λ (d1 d2) (* (+ d2 30) d1))
'(λ (d1 d2) (* d1 (exp (log (/ 30 (pow (exp d2) (+ -1/30 (* d2 1/1800))))))))
#f
'(λ (d1 d2) (+ (+ (* d1 10) (* d1 d2)) (* d1 20)))
'(λ (d1 d2) (* (+ d2 30) d1))
'(λ (d1 d2) (* d1 (exp (log (/ 30 (pow (exp d2) (+ -1/30 (* d2 1/1800))))))))
#f
|       |start prog|double|single|posit16|
|double |0.18757312|0.0257|27.413|#f     |
|single |8.69715318|8.6799|4.2326|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath dist3
Starting program: (λ (d1 d2 d3) (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)))
Precision double result: (λ (d1 d2 d3) (* (+ d3 (+ d2 37)) d1))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (d1 d2 d3) (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)))
'(λ (d1 d2 d3) (* (+ d3 (+ d2 37)) d1))
#f
#f
'(λ (d1 d2 d3) (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)))
'(λ (d1 d2 d3) (* (+ d3 (+ d2 37)) d1))
#f
#f
'(λ (d1 d2 d3) (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)))
'(λ (d1 d2 d3) (* (+ d3 (+ d2 37)) d1))
#f
#f
|       |start prog|double|single|posit16|
|double |0.044875  |0.0266|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath dist4
Starting program: (λ (d1 d2 d3 d4) (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)))
Precision double timed out or failed
Precision single result: (λ (d1 d2 d3 d4) 0)
Precision posit16 timed out or failed
'(λ (d1 d2 d3 d4) (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)))
#f
'(λ (d1 d2 d3 d4) 0)
#f
'(λ (d1 d2 d3 d4) (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)))
#f
'(λ (d1 d2 d3 d4) 0)
#f
'(λ (d1 d2 d3 d4) (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)))
#f
'(λ (d1 d2 d3 d4) 0)
#f
|       |start prog|double|single|posit16|
|double |#f        |#f    |#f    |#f     |
|single |21.0167721|#f    |11.934|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath test3
Starting program: (λ (d1 d2 d3) (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)))
Precision double result: (λ (d1 d2 d3) (* (+ (+ d2 3) d3) d1))
Precision single result: (λ (d1 d2 d3) (+ (+ (* (* (cbrt 3) (cbrt d1)) (* (cbrt (* 3 d1)) (cbrt (* 3 d1)))) (* d2 d1)) (* d1 d3)))
Precision posit16 timed out or failed
'(λ (d1 d2 d3) (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)))
'(λ (d1 d2 d3) (* (+ (+ d2 3) d3) d1))
'(λ (d1 d2 d3) (+ (+ (* (* (cbrt 3) (cbrt d1)) (* (cbrt (* 3 d1)) (cbrt (* 3 d1)))) (* d2 d1)) (* d1 d3)))
#f
'(λ (d1 d2 d3) (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)))
'(λ (d1 d2 d3) (* (+ (+ d2 3) d3) d1))
'(λ (d1 d2 d3) (+ (+ (* (* (cbrt 3) (cbrt d1)) (* (cbrt (* 3 d1)) (cbrt (* 3 d1)))) (* d2 d1)) (* d1 d3)))
#f
'(λ (d1 d2 d3) (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)))
'(λ (d1 d2 d3) (* (+ (+ d2 3) d3) d1))
'(λ (d1 d2 d3) (+ (+ (* (* (cbrt 3) (cbrt d1)) (* (cbrt (* 3 d1)) (cbrt (* 3 d1)))) (* d2 d1)) (* d1 d3)))
#f
|       |start prog|double|single|posit16|
|double |0.06845772|0.0639|0.4063|#f     |
|single |15.6690712|15.668|15.702|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath repmul
Starting program: (λ (d1) (* (* (* d1 d1) d1) d1))
Precision double result: (λ (d1) (pow d1 4))
Precision single result: (λ (d1) (* (* (cbrt (cbrt (pow d1 4))) (* (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))) (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))))) (* (cbrt (pow d1 4)) (cbrt (pow d1 4)))))
Precision posit16 timed out or failed
'(λ (d1) (* (* (* d1 d1) d1) d1))
'(λ (d1) (pow d1 4))
'(λ (d1) (* (* (cbrt (cbrt (pow d1 4))) (* (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))) (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))))) (* (cbrt (pow d1 4)) (cbrt (pow d1 4)))))
#f
'(λ (d1) (* (* (* d1 d1) d1) d1))
'(λ (d1) (pow d1 4))
'(λ (d1) (* (* (cbrt (cbrt (pow d1 4))) (* (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))) (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))))) (* (cbrt (pow d1 4)) (cbrt (pow d1 4)))))
#f
'(λ (d1) (* (* (* d1 d1) d1) d1))
'(λ (d1) (pow d1 4))
'(λ (d1) (* (* (cbrt (cbrt (pow d1 4))) (* (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))) (sqrt (cbrt (* (cbrt (pow d1 4)) (cbrt (pow d1 4))))))) (* (cbrt (pow d1 4)) (cbrt (pow d1 4)))))
#f
|       |start prog|double|single|posit16|
|double |0.13956372|0     |0.6317|#f     |
|single |0.05338515|0.0504|0.0705|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: FastMath test5
Starting program: (λ (d1) (* (* d1 (* (* (* (* (* d1 (* d1 d1)) d1) d1) (* d1 d1)) d1)) d1))
Precision double result: (λ (d1) (pow d1 10))
Precision single result: (λ (d1) (* (* (cbrt (pow d1 10)) (cbrt (pow d1 10))) (cbrt (pow (pow d1 2) 5))))
Precision posit16 timed out or failed
'(λ (d1) (* (* d1 (* (* (* (* (* d1 (* d1 d1)) d1) d1) (* d1 d1)) d1)) d1))
'(λ (d1) (pow d1 10))
'(λ (d1) (* (* (cbrt (pow d1 10)) (cbrt (pow d1 10))) (cbrt (pow (pow d1 2) 5))))
#f
'(λ (d1) (* (* d1 (* (* (* (* (* d1 (* d1 d1)) d1) d1) (* d1 d1)) d1)) d1))
'(λ (d1) (pow d1 10))
'(λ (d1) (* (* (cbrt (pow d1 10)) (cbrt (pow d1 10))) (cbrt (pow (pow d1 2) 5))))
#f
'(λ (d1) (* (* d1 (* (* (* (* (* d1 (* d1 d1)) d1) d1) (* d1 d1)) d1)) d1))
'(λ (d1) (pow d1 10))
'(λ (d1) (* (* (cbrt (pow d1 10)) (cbrt (pow d1 10))) (cbrt (pow (pow d1 2) 5))))
#f
|       |start prog|double|single|posit16|
|double |0.12880076|0     |0.2333|#f     |
|single |0.04254391|0.0406|0.0421|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.gamma, branch z greater than 0.5
Starting program: (λ (z) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- z 1) 7) 0.5) (+ (- z 1) 0.5))) (exp (- (+ (+ (- z 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- z 1) 1))) (/ -1259.1392167224028 (+ (- z 1) 2))) (/ 771.3234287776531 (+ (- z 1) 3))) (/ -176.6150291621406 (+ (- z 1) 4))) (/ 12.507343278686905 (+ (- z 1) 5))) (/ -0.13857109526572012 (+ (- z 1) 6))) (/ 9.984369578019572e-06 (+ (- z 1) 7))) (/ 1.5056327351493116e-07 (+ (- z 1) 8)))))
Precision double result: (λ (z) (* (+ (+ (+ (/ 771.3234287776531 (+ 2 z)) (/ -176.6150291621406 (- z -3))) (+ (+ (/ 676.5203681218851 z) 0.9999999999998099) (/ -1259.1392167224028 (- z -1)))) (+ (+ (/ 9.984369578019572e-06 (- z -6)) (/ 1.5056327351493116e-07 (- z -7))) (+ (/ 12.507343278686905 (+ 4 z)) (/ -0.13857109526572012 (+ 5 z))))) (* (sqrt (* PI 2)) (* (/ (pow (+ (+ 0.5 z) 6) 0.5) (exp (+ 0.5 z))) (/ (pow (+ (+ 0.5 z) 6) (+ -1 z)) (exp 6))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (z) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- z 1) 7) 0.5) (+ (- z 1) 0.5))) (exp (- (+ (+ (- z 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- z 1) 1))) (/ -1259.1392167224028 (+ (- z 1) 2))) (/ 771.3234287776531 (+ (- z 1) 3))) (/ -176.6150291621406 (+ (- z 1) 4))) (/ 12.507343278686905 (+ (- z 1) 5))) (/ -0.13857109526572012 (+ (- z 1) 6))) (/ 9.984369578019572e-06 (+ (- z 1) 7))) (/ 1.5056327351493116e-07 (+ (- z 1) 8)))))
'(λ (z) (* (+ (+ (+ (/ 771.3234287776531 (+ 2 z)) (/ -176.6150291621406 (- z -3))) (+ (+ (/ 676.5203681218851 z) 0.9999999999998099) (/ -1259.1392167224028 (- z -1)))) (+ (+ (/ 9.984369578019572e-06 (- z -6)) (/ 1.5056327351493116e-07 (- z -7))) (+ (/ 12.507343278686905 (+ 4 z)) (/ -0.13857109526572012 (+ 5 z))))) (* (sqrt (* PI 2)) (* (/ (pow (+ (+ 0.5 z) 6) 0.5) (exp (+ 0.5 z))) (/ (pow (+ (+ 0.5 z) 6) (+ -1 z)) (exp 6))))))
#f
#f
'(λ (z) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- z 1) 7) 0.5) (+ (- z 1) 0.5))) (exp (- (+ (+ (- z 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- z 1) 1))) (/ -1259.1392167224028 (+ (- z 1) 2))) (/ 771.3234287776531 (+ (- z 1) 3))) (/ -176.6150291621406 (+ (- z 1) 4))) (/ 12.507343278686905 (+ (- z 1) 5))) (/ -0.13857109526572012 (+ (- z 1) 6))) (/ 9.984369578019572e-06 (+ (- z 1) 7))) (/ 1.5056327351493116e-07 (+ (- z 1) 8)))))
'(λ (z) (* (+ (+ (+ (/ 771.3234287776531 (+ 2 z)) (/ -176.6150291621406 (- z -3))) (+ (+ (/ 676.5203681218851 z) 0.9999999999998099) (/ -1259.1392167224028 (- z -1)))) (+ (+ (/ 9.984369578019572e-06 (- z -6)) (/ 1.5056327351493116e-07 (- z -7))) (+ (/ 12.507343278686905 (+ 4 z)) (/ -0.13857109526572012 (+ 5 z))))) (* (sqrt (* PI 2)) (* (/ (pow (+ (+ 0.5 z) 6) 0.5) (exp (+ 0.5 z))) (/ (pow (+ (+ 0.5 z) 6) (+ -1 z)) (exp 6))))))
#f
#f
'(λ (z) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- z 1) 7) 0.5) (+ (- z 1) 0.5))) (exp (- (+ (+ (- z 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- z 1) 1))) (/ -1259.1392167224028 (+ (- z 1) 2))) (/ 771.3234287776531 (+ (- z 1) 3))) (/ -176.6150291621406 (+ (- z 1) 4))) (/ 12.507343278686905 (+ (- z 1) 5))) (/ -0.13857109526572012 (+ (- z 1) 6))) (/ 9.984369578019572e-06 (+ (- z 1) 7))) (/ 1.5056327351493116e-07 (+ (- z 1) 8)))))
'(λ (z) (* (+ (+ (+ (/ 771.3234287776531 (+ 2 z)) (/ -176.6150291621406 (- z -3))) (+ (+ (/ 676.5203681218851 z) 0.9999999999998099) (/ -1259.1392167224028 (- z -1)))) (+ (+ (/ 9.984369578019572e-06 (- z -6)) (/ 1.5056327351493116e-07 (- z -7))) (+ (/ 12.507343278686905 (+ 4 z)) (/ -0.13857109526572012 (+ 5 z))))) (* (sqrt (* PI 2)) (* (/ (pow (+ (+ 0.5 z) 6) 0.5) (exp (+ 0.5 z))) (/ (pow (+ (+ 0.5 z) 6) (+ -1 z)) (exp 6))))))
#f
#f
|       |start prog|double|single|posit16|
|double |59.8230118|0.7517|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.gamma, branch z less than 0.5
Starting program: (λ (z) (* (/ PI (sin (* PI z))) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- (- 1 z) 1) 7) 0.5) (+ (- (- 1 z) 1) 0.5))) (exp (- (+ (+ (- (- 1 z) 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- (- 1 z) 1) 1))) (/ -1259.1392167224028 (+ (- (- 1 z) 1) 2))) (/ 771.3234287776531 (+ (- (- 1 z) 1) 3))) (/ -176.6150291621406 (+ (- (- 1 z) 1) 4))) (/ 12.507343278686905 (+ (- (- 1 z) 1) 5))) (/ -0.13857109526572012 (+ (- (- 1 z) 1) 6))) (/ 9.984369578019572e-06 (+ (- (- 1 z) 1) 7))) (/ 1.5056327351493116e-07 (+ (- (- 1 z) 1) 8))))))
Precision double result: (λ (z) (* (+ (+ (/ 1.5056327351493116e-07 (- (- 1 z) -7)) (/ 9.984369578019572e-06 (+ (- 1 z) 6))) (+ (+ (+ (/ 12.507343278686905 (- 5 z)) (/ -0.13857109526572012 (- 6 z))) (+ (/ -176.6150291621406 (- 4 z)) (/ 771.3234287776531 (- 3 z)))) (+ 0.9999999999998099 (+ (/ -1259.1392167224028 (- 2 z)) (/ 676.5203681218851 (- 1 z)))))) (/ (* (* (sqrt (* 2 PI)) (pow (- (- 1 z) (- -6 0.5)) (- (- 1 z) (- 1 0.5)))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5)))))))) (sin (* z PI)))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (z) (* (/ PI (sin (* PI z))) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- (- 1 z) 1) 7) 0.5) (+ (- (- 1 z) 1) 0.5))) (exp (- (+ (+ (- (- 1 z) 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- (- 1 z) 1) 1))) (/ -1259.1392167224028 (+ (- (- 1 z) 1) 2))) (/ 771.3234287776531 (+ (- (- 1 z) 1) 3))) (/ -176.6150291621406 (+ (- (- 1 z) 1) 4))) (/ 12.507343278686905 (+ (- (- 1 z) 1) 5))) (/ -0.13857109526572012 (+ (- (- 1 z) 1) 6))) (/ 9.984369578019572e-06 (+ (- (- 1 z) 1) 7))) (/ 1.5056327351493116e-07 (+ (- (- 1 z) 1) 8))))))
'(λ (z) (* (+ (+ (/ 1.5056327351493116e-07 (- (- 1 z) -7)) (/ 9.984369578019572e-06 (+ (- 1 z) 6))) (+ (+ (+ (/ 12.507343278686905 (- 5 z)) (/ -0.13857109526572012 (- 6 z))) (+ (/ -176.6150291621406 (- 4 z)) (/ 771.3234287776531 (- 3 z)))) (+ 0.9999999999998099 (+ (/ -1259.1392167224028 (- 2 z)) (/ 676.5203681218851 (- 1 z)))))) (/ (* (* (sqrt (* 2 PI)) (pow (- (- 1 z) (- -6 0.5)) (- (- 1 z) (- 1 0.5)))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5)))))))) (sin (* z PI)))))
#f
#f
'(λ (z) (* (/ PI (sin (* PI z))) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- (- 1 z) 1) 7) 0.5) (+ (- (- 1 z) 1) 0.5))) (exp (- (+ (+ (- (- 1 z) 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- (- 1 z) 1) 1))) (/ -1259.1392167224028 (+ (- (- 1 z) 1) 2))) (/ 771.3234287776531 (+ (- (- 1 z) 1) 3))) (/ -176.6150291621406 (+ (- (- 1 z) 1) 4))) (/ 12.507343278686905 (+ (- (- 1 z) 1) 5))) (/ -0.13857109526572012 (+ (- (- 1 z) 1) 6))) (/ 9.984369578019572e-06 (+ (- (- 1 z) 1) 7))) (/ 1.5056327351493116e-07 (+ (- (- 1 z) 1) 8))))))
'(λ (z) (* (+ (+ (/ 1.5056327351493116e-07 (- (- 1 z) -7)) (/ 9.984369578019572e-06 (+ (- 1 z) 6))) (+ (+ (+ (/ 12.507343278686905 (- 5 z)) (/ -0.13857109526572012 (- 6 z))) (+ (/ -176.6150291621406 (- 4 z)) (/ 771.3234287776531 (- 3 z)))) (+ 0.9999999999998099 (+ (/ -1259.1392167224028 (- 2 z)) (/ 676.5203681218851 (- 1 z)))))) (/ (* (* (sqrt (* 2 PI)) (pow (- (- 1 z) (- -6 0.5)) (- (- 1 z) (- 1 0.5)))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5)))))))) (sin (* z PI)))))
#f
#f
'(λ (z) (* (/ PI (sin (* PI z))) (* (* (* (sqrt (* PI 2)) (pow (+ (+ (- (- 1 z) 1) 7) 0.5) (+ (- (- 1 z) 1) 0.5))) (exp (- (+ (+ (- (- 1 z) 1) 7) 0.5)))) (+ (+ (+ (+ (+ (+ (+ (+ 0.9999999999998099 (/ 676.5203681218851 (+ (- (- 1 z) 1) 1))) (/ -1259.1392167224028 (+ (- (- 1 z) 1) 2))) (/ 771.3234287776531 (+ (- (- 1 z) 1) 3))) (/ -176.6150291621406 (+ (- (- 1 z) 1) 4))) (/ 12.507343278686905 (+ (- (- 1 z) 1) 5))) (/ -0.13857109526572012 (+ (- (- 1 z) 1) 6))) (/ 9.984369578019572e-06 (+ (- (- 1 z) 1) 7))) (/ 1.5056327351493116e-07 (+ (- (- 1 z) 1) 8))))))
'(λ (z) (* (+ (+ (/ 1.5056327351493116e-07 (- (- 1 z) -7)) (/ 9.984369578019572e-06 (+ (- 1 z) 6))) (+ (+ (+ (/ 12.507343278686905 (- 5 z)) (/ -0.13857109526572012 (- 6 z))) (+ (/ -176.6150291621406 (- 4 z)) (/ 771.3234287776531 (- 3 z)))) (+ 0.9999999999998099 (+ (/ -1259.1392167224028 (- 2 z)) (/ 676.5203681218851 (- 1 z)))))) (/ (* (* (sqrt (* 2 PI)) (pow (- (- 1 z) (- -6 0.5)) (- (- 1 z) (- 1 0.5)))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (* (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5))))) (cbrt (/ PI (exp (- (- 1 z) (- -6 0.5)))))))) (sin (* z PI)))))
#f
#f
|       |start prog|double|single|posit16|
|double |1.81040737|0.5209|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.lambertw, estimator
Starting program: (λ (x) (- (log x) (log (log x))))
Precision double result: (λ (x) (log (/ x (log x))))
Precision single result: (λ (x) (log (/ x (log x))))
Precision posit16 timed out or failed
'(λ (x) (- (log x) (log (log x))))
'(λ (x) (log (/ x (log x))))
'(λ (x) (log (/ x (log x))))
#f
'(λ (x) (- (log x) (log (log x))))
'(λ (x) (log (/ x (log x))))
'(λ (x) (log (/ x (log x))))
#f
'(λ (x) (- (log x) (log (log x))))
'(λ (x) (log (/ x (log x))))
'(λ (x) (log (/ x (log x))))
#f
|       |start prog|double|single|posit16|
|double |0.26207312|0.0033|0.0033|#f     |
|single |26.2720206|26.244|26.244|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.lambertw, newton loop step
Starting program: (λ (wj x) (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))))
Precision double result: (λ (wj x) (+ (/ x (* (+ 1 wj) (exp wj))) (- (+ (pow wj 2) (pow wj 4)) (pow wj 3))))
Precision single result: (λ (wj x) (- (+ x (pow wj 2)) (* (* x wj) 2)))
Precision posit16 timed out or failed
'(λ (wj x) (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))))
'(λ (wj x) (+ (/ x (* (+ 1 wj) (exp wj))) (- (+ (pow wj 2) (pow wj 4)) (pow wj 3))))
'(λ (wj x) (- (+ x (pow wj 2)) (* (* x wj) 2)))
#f
'(λ (wj x) (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))))
'(λ (wj x) (+ (/ x (* (+ 1 wj) (exp wj))) (- (+ (pow wj 2) (pow wj 4)) (pow wj 3))))
'(λ (wj x) (- (+ x (pow wj 2)) (* (* x wj) 2)))
#f
'(λ (wj x) (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))))
'(λ (wj x) (+ (/ x (* (+ 1 wj) (exp wj))) (- (+ (pow wj 2) (pow wj 4)) (pow wj 3))))
'(λ (wj x) (- (+ x (pow wj 2)) (* (* x wj) 2)))
#f
|       |start prog|double|single|posit16|
|double |13.2020573|1.0665|2.1368|#f     |
|single |1.08799728|0.8515|1.0100|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.dawson
Starting program: (λ (x) (* (/ (+ (+ (+ (+ (+ 1 (* 0.1049934947 (* x x))) (* 0.0424060604 (* (* x x) (* x x)))) (* 0.0072644182 (* (* (* x x) (* x x)) (* x x)))) (* 0.0005064034 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0001789971 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 0.7715471019 (* x x))) (* 0.2909738639 (* (* x x) (* x x)))) (* 0.0694555761 (* (* (* x x) (* x x)) (* x x)))) (* 0.0140005442 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0008327945 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 0.0001789971) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x))
Precision double result: (λ (x) (if (or (<= x -472.06881743347446) (not (<= x 403.3672820734752))) (+ (/ (/ 0.2514179000665375 x) (* x x)) (+ (/ 0.5 x) (/ 0.15298196345929327 (pow x 5)))) (* (exp (- (log (+ (+ (* (+ (* (* x 0.0001789971) x) 0.0005064034) (pow (* x x) 4)) (+ 1 (* (* x x) 0.1049934947))) (* (+ (* x (* x 0.0072644182)) 0.0424060604) (pow x 4)))) (log (+ (* (+ (* x (* 0.0694555761 x)) 0.2909738639) (pow x 4)) (+ (* (* (* x (pow x 4)) (* x (pow x 4))) (+ 0.0008327945 (* (* x x) (* 2 0.0001789971)))) (+ (* 0.0140005442 (pow (* x x) 4)) (+ (* (* x x) 0.7715471019) 1))))))) x)))
Precision single timed out or failed
Precision posit16 result: (λ (x) (/.p16 (*.p16 (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0001789971) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x)))) (+.p16 (+.p16 (*.p16 (*.p16 x x) (real->posit16 0.1049934947)) (real->posit16 1.0)) (*.p16 (real->posit16 0.0424060604) (*.p16 (*.p16 x x) (*.p16 x x))))) (+.p16 (*.p16 (*.p16 (real->posit16 0.0072644182) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0005064034) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))))) x) (+.p16 (+.p16 (+.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (real->posit16 0.0694555761))) (real->posit16 1.0)) (*.p16 (*.p16 x x) (+.p16 (real->posit16 0.7715471019) (*.p16 (*.p16 x x) (real->posit16 0.2909738639))))) (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0140005442) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0008327945) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))))) (*.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (real->posit16 0.0001789971) (real->posit16 2.0))))))))
'(λ (x) (* (/ (+ (+ (+ (+ (+ 1 (* 0.1049934947 (* x x))) (* 0.0424060604 (* (* x x) (* x x)))) (* 0.0072644182 (* (* (* x x) (* x x)) (* x x)))) (* 0.0005064034 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0001789971 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 0.7715471019 (* x x))) (* 0.2909738639 (* (* x x) (* x x)))) (* 0.0694555761 (* (* (* x x) (* x x)) (* x x)))) (* 0.0140005442 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0008327945 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 0.0001789971) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x))
'(λ (x) (if (or (<= x -472.06881743347446) (not (<= x 403.3672820734752))) (+ (/ (/ 0.2514179000665375 x) (* x x)) (+ (/ 0.5 x) (/ 0.15298196345929327 (pow x 5)))) (* (exp (- (log (+ (+ (* (+ (* (* x 0.0001789971) x) 0.0005064034) (pow (* x x) 4)) (+ 1 (* (* x x) 0.1049934947))) (* (+ (* x (* x 0.0072644182)) 0.0424060604) (pow x 4)))) (log (+ (* (+ (* x (* 0.0694555761 x)) 0.2909738639) (pow x 4)) (+ (* (* (* x (pow x 4)) (* x (pow x 4))) (+ 0.0008327945 (* (* x x) (* 2 0.0001789971)))) (+ (* 0.0140005442 (pow (* x x) 4)) (+ (* (* x x) 0.7715471019) 1))))))) x)))
#f
'(λ (x) (/.p16 (*.p16 (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0001789971) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x)))) (+.p16 (+.p16 (*.p16 (*.p16 x x) (real->posit16 0.1049934947)) (real->posit16 1.0)) (*.p16 (real->posit16 0.0424060604) (*.p16 (*.p16 x x) (*.p16 x x))))) (+.p16 (*.p16 (*.p16 (real->posit16 0.0072644182) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0005064034) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))))) x) (+.p16 (+.p16 (+.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (real->posit16 0.0694555761))) (real->posit16 1.0)) (*.p16 (*.p16 x x) (+.p16 (real->posit16 0.7715471019) (*.p16 (*.p16 x x) (real->posit16 0.2909738639))))) (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0140005442) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0008327945) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))))) (*.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (real->posit16 0.0001789971) (real->posit16 2.0))))))))
'(λ (x) (* (/ (+ (+ (+ (+ (+ 1 (* 0.1049934947 (* x x))) (* 0.0424060604 (* (* x x) (* x x)))) (* 0.0072644182 (* (* (* x x) (* x x)) (* x x)))) (* 0.0005064034 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0001789971 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 0.7715471019 (* x x))) (* 0.2909738639 (* (* x x) (* x x)))) (* 0.0694555761 (* (* (* x x) (* x x)) (* x x)))) (* 0.0140005442 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0008327945 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 0.0001789971) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x))
'(λ (x) (if (or (<= x -472.06881743347446) (not (<= x 403.3672820734752))) (+ (/ (/ 0.2514179000665375 x) (* x x)) (+ (/ 0.5 x) (/ 0.15298196345929327 (pow x 5)))) (* (exp (- (log (+ (+ (* (+ (* (* x 0.0001789971) x) 0.0005064034) (pow (* x x) 4)) (+ 1 (* (* x x) 0.1049934947))) (* (+ (* x (* x 0.0072644182)) 0.0424060604) (pow x 4)))) (log (+ (* (+ (* x (* 0.0694555761 x)) 0.2909738639) (pow x 4)) (+ (* (* (* x (pow x 4)) (* x (pow x 4))) (+ 0.0008327945 (* (* x x) (* 2 0.0001789971)))) (+ (* 0.0140005442 (pow (* x x) 4)) (+ (* (* x x) 0.7715471019) 1))))))) x)))
#f
'(λ (x) (/.p16 (*.p16 (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0001789971) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x)))) (+.p16 (+.p16 (*.p16 (*.p16 x x) (real->posit16 0.1049934947)) (real->posit16 1.0)) (*.p16 (real->posit16 0.0424060604) (*.p16 (*.p16 x x) (*.p16 x x))))) (+.p16 (*.p16 (*.p16 (real->posit16 0.0072644182) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0005064034) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))))) x) (+.p16 (+.p16 (+.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (real->posit16 0.0694555761))) (real->posit16 1.0)) (*.p16 (*.p16 x x) (+.p16 (real->posit16 0.7715471019) (*.p16 (*.p16 x x) (real->posit16 0.2909738639))))) (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0140005442) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0008327945) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))))) (*.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (real->posit16 0.0001789971) (real->posit16 2.0))))))))
'(λ (x) (* (/ (+ (+ (+ (+ (+ 1 (* 0.1049934947 (* x x))) (* 0.0424060604 (* (* x x) (* x x)))) (* 0.0072644182 (* (* (* x x) (* x x)) (* x x)))) (* 0.0005064034 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0001789971 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 0.7715471019 (* x x))) (* 0.2909738639 (* (* x x) (* x x)))) (* 0.0694555761 (* (* (* x x) (* x x)) (* x x)))) (* 0.0140005442 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 0.0008327945 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 0.0001789971) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x))
'(λ (x) (if (or (<= x -472.06881743347446) (not (<= x 403.3672820734752))) (+ (/ (/ 0.2514179000665375 x) (* x x)) (+ (/ 0.5 x) (/ 0.15298196345929327 (pow x 5)))) (* (exp (- (log (+ (+ (* (+ (* (* x 0.0001789971) x) 0.0005064034) (pow (* x x) 4)) (+ 1 (* (* x x) 0.1049934947))) (* (+ (* x (* x 0.0072644182)) 0.0424060604) (pow x 4)))) (log (+ (* (+ (* x (* 0.0694555761 x)) 0.2909738639) (pow x 4)) (+ (* (* (* x (pow x 4)) (* x (pow x 4))) (+ 0.0008327945 (* (* x x) (* 2 0.0001789971)))) (+ (* 0.0140005442 (pow (* x x) 4)) (+ (* (* x x) 0.7715471019) 1))))))) x)))
#f
'(λ (x) (/.p16 (*.p16 (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0001789971) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x)))) (+.p16 (+.p16 (*.p16 (*.p16 x x) (real->posit16 0.1049934947)) (real->posit16 1.0)) (*.p16 (real->posit16 0.0424060604) (*.p16 (*.p16 x x) (*.p16 x x))))) (+.p16 (*.p16 (*.p16 (real->posit16 0.0072644182) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0005064034) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))))) x) (+.p16 (+.p16 (+.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (real->posit16 0.0694555761))) (real->posit16 1.0)) (*.p16 (*.p16 x x) (+.p16 (real->posit16 0.7715471019) (*.p16 (*.p16 x x) (real->posit16 0.2909738639))))) (+.p16 (+.p16 (*.p16 (*.p16 (real->posit16 0.0140005442) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (real->posit16 0.0008327945) (*.p16 x x)) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))))) (*.p16 (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (*.p16 x x) (*.p16 x x))) (*.p16 (*.p16 (*.p16 x x) (*.p16 x x)) (*.p16 (real->posit16 0.0001789971) (real->posit16 2.0))))))))
|       |start prog|double|single|posit16|
|double |29.1070901|0.0254|#f    |29.0886|
|single |#f        |#f    |#f    |#f     |
|posit16|30.5658310|#f    |#f    |29.2648|

Now running test: Jmat.Real.erfi, branch x less than or equal to 0.5
Starting program: (λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)))))))
Precision double result: (λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (* (+ 1/5 (* 1/21 (* (fabs x) (fabs x)))) (* (pow (fabs x) 4) (fabs x))) (+ (* (* 2/3 (fabs x)) (* (fabs x) (fabs x))) (* (fabs x) 2))))))
Precision single result: (λ (x) (fabs (+ (+ (* (* (* 1/5 (fabs x)) (* (fabs x) (fabs x))) (* (* (fabs x) (fabs x)) (/ 1 (sqrt PI)))) (* (* (/ 1/21 (sqrt PI)) (fabs x)) (* (pow (fabs x) 3) (pow (fabs x) 3)))) (/ (+ (* 2 (fabs x)) (* (* 2/3 (fabs x)) (* (fabs x) (fabs x)))) (sqrt PI)))))
Precision posit16 timed out or failed
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)))))))
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (* (+ 1/5 (* 1/21 (* (fabs x) (fabs x)))) (* (pow (fabs x) 4) (fabs x))) (+ (* (* 2/3 (fabs x)) (* (fabs x) (fabs x))) (* (fabs x) 2))))))
'(λ (x) (fabs (+ (+ (* (* (* 1/5 (fabs x)) (* (fabs x) (fabs x))) (* (* (fabs x) (fabs x)) (/ 1 (sqrt PI)))) (* (* (/ 1/21 (sqrt PI)) (fabs x)) (* (pow (fabs x) 3) (pow (fabs x) 3)))) (/ (+ (* 2 (fabs x)) (* (* 2/3 (fabs x)) (* (fabs x) (fabs x)))) (sqrt PI)))))
#f
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)))))))
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (* (+ 1/5 (* 1/21 (* (fabs x) (fabs x)))) (* (pow (fabs x) 4) (fabs x))) (+ (* (* 2/3 (fabs x)) (* (fabs x) (fabs x))) (* (fabs x) 2))))))
'(λ (x) (fabs (+ (+ (* (* (* 1/5 (fabs x)) (* (fabs x) (fabs x))) (* (* (fabs x) (fabs x)) (/ 1 (sqrt PI)))) (* (* (/ 1/21 (sqrt PI)) (fabs x)) (* (pow (fabs x) 3) (pow (fabs x) 3)))) (/ (+ (* 2 (fabs x)) (* (* 2/3 (fabs x)) (* (fabs x) (fabs x)))) (sqrt PI)))))
#f
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)))))))
'(λ (x) (fabs (* (/ 1 (sqrt PI)) (+ (* (+ 1/5 (* 1/21 (* (fabs x) (fabs x)))) (* (pow (fabs x) 4) (fabs x))) (+ (* (* 2/3 (fabs x)) (* (fabs x) (fabs x))) (* (fabs x) 2))))))
'(λ (x) (fabs (+ (+ (* (* (* 1/5 (fabs x)) (* (fabs x) (fabs x))) (* (* (fabs x) (fabs x)) (/ 1 (sqrt PI)))) (* (* (/ 1/21 (sqrt PI)) (fabs x)) (* (pow (fabs x) 3) (pow (fabs x) 3)))) (/ (+ (* 2 (fabs x)) (* (* 2/3 (fabs x)) (* (fabs x) (fabs x)))) (sqrt PI)))))
#f
|       |start prog|double|single|posit16|
|double |0.20885530|0.1642|0.5486|#f     |
|single |0.08018138|0.0797|0.0804|#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.erfi, branch x greater than or equal to 5
Starting program: (λ (x) (* (* (/ 1 (sqrt PI)) (exp (* (fabs x) (fabs x)))) (+ (+ (+ (/ 1 (fabs x)) (* (/ 1 2) (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 3 4) (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 15 8) (* (* (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x)))))))
Precision double result: (λ (x) (+ (* (+ (+ 1 (/ (/ 1/2 (fabs x)) (fabs x))) (* 3/4 (pow (/ 1 (fabs x)) 4))) (* (/ (/ 1 (sqrt PI)) (fabs x)) (exp (* (fabs x) (fabs x))))) (* (* (pow (fabs x) -4) (/ 15/8 (sqrt PI))) (* (exp (* (fabs x) (fabs x))) (/ (/ 1 (fabs x)) (* (fabs x) (fabs x)))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (x) (* (* (/ 1 (sqrt PI)) (exp (* (fabs x) (fabs x)))) (+ (+ (+ (/ 1 (fabs x)) (* (/ 1 2) (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 3 4) (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 15 8) (* (* (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x)))))))
'(λ (x) (+ (* (+ (+ 1 (/ (/ 1/2 (fabs x)) (fabs x))) (* 3/4 (pow (/ 1 (fabs x)) 4))) (* (/ (/ 1 (sqrt PI)) (fabs x)) (exp (* (fabs x) (fabs x))))) (* (* (pow (fabs x) -4) (/ 15/8 (sqrt PI))) (* (exp (* (fabs x) (fabs x))) (/ (/ 1 (fabs x)) (* (fabs x) (fabs x)))))))
#f
#f
'(λ (x) (* (* (/ 1 (sqrt PI)) (exp (* (fabs x) (fabs x)))) (+ (+ (+ (/ 1 (fabs x)) (* (/ 1 2) (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 3 4) (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 15 8) (* (* (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x)))))))
'(λ (x) (+ (* (+ (+ 1 (/ (/ 1/2 (fabs x)) (fabs x))) (* 3/4 (pow (/ 1 (fabs x)) 4))) (* (/ (/ 1 (sqrt PI)) (fabs x)) (exp (* (fabs x) (fabs x))))) (* (* (pow (fabs x) -4) (/ 15/8 (sqrt PI))) (* (exp (* (fabs x) (fabs x))) (/ (/ 1 (fabs x)) (* (fabs x) (fabs x)))))))
#f
#f
'(λ (x) (* (* (/ 1 (sqrt PI)) (exp (* (fabs x) (fabs x)))) (+ (+ (+ (/ 1 (fabs x)) (* (/ 1 2) (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 3 4) (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 15 8) (* (* (* (* (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x)))))))
'(λ (x) (+ (* (+ (+ 1 (/ (/ 1/2 (fabs x)) (fabs x))) (* 3/4 (pow (/ 1 (fabs x)) 4))) (* (/ (/ 1 (sqrt PI)) (fabs x)) (exp (* (fabs x) (fabs x))))) (* (* (pow (fabs x) -4) (/ 15/8 (sqrt PI))) (* (exp (* (fabs x) (fabs x))) (/ (/ 1 (fabs x)) (* (fabs x) (fabs x)))))))
#f
#f
|       |start prog|double|single|posit16|
|double |1.51294003|0.9864|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: Jmat.Real.erf
Starting program: (λ (x) (- 1 (* (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 0.254829592 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -0.284496736 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 1.421413741 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -1.453152027 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) 1.061405429))))))))) (exp (- (* (fabs x) (fabs x)))))))
Precision double result: (λ (x) (cbrt (* (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (log (exp (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))) (* (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x))))))) (exp (log (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))))))
Precision single timed out or failed
Precision posit16 timed out or failed
'(λ (x) (- 1 (* (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 0.254829592 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -0.284496736 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 1.421413741 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -1.453152027 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) 1.061405429))))))))) (exp (- (* (fabs x) (fabs x)))))))
'(λ (x) (cbrt (* (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (log (exp (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))) (* (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x))))))) (exp (log (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))))))
#f
#f
'(λ (x) (- 1 (* (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 0.254829592 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -0.284496736 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 1.421413741 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -1.453152027 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) 1.061405429))))))))) (exp (- (* (fabs x) (fabs x)))))))
'(λ (x) (cbrt (* (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (log (exp (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))) (* (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x))))))) (exp (log (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))))))
#f
#f
'(λ (x) (- 1 (* (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 0.254829592 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -0.284496736 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ 1.421413741 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) (+ -1.453152027 (* (/ 1 (+ 1 (* 0.3275911 (fabs x)))) 1.061405429))))))))) (exp (- (* (fabs x) (fabs x)))))))
'(λ (x) (cbrt (* (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (log (exp (* (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))) (cbrt (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))) (* (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x))))))) (exp (log (log (exp (- 1 (* (* (/ 1 (+ (* (fabs x) 0.3275911) 1)) (+ (* (+ (* (+ 1.421413741 (* (+ (* 1.061405429 (/ 1 (+ (* (fabs x) 0.3275911) 1))) -1.453152027) (/ 1 (+ (* (fabs x) 0.3275911) 1)))) (/ 1 (+ (* (fabs x) 0.3275911) 1))) -0.284496736) (/ 1 (+ (* (fabs x) 0.3275911) 1))) 0.254829592)) (exp (* (- (fabs x)) (fabs x)))))))))))))
#f
#f
|       |start prog|double|single|posit16|
|double |13.7607956|12.999|#f    |#f     |
|single |#f        |#f    |#f    |#f     |
|posit16|#f        |#f    |#f    |#f     |

Now running test: math.abs on complex
Starting program: (λ (re im) (sqrt (+ (* re re) (* im im))))
Precision double result: (λ (re im) (if (<= re -3.740708286200945e+123) (- re) (if (<= re 5.824662638159158e+130) (sqrt (+ (* im im) (* re re))) re)))
Precision single timed out or failed
Precision posit16 result: (λ (re im) (sqrt.p16 (+.p16 (*.p16 re re) (*.p16 im im))))
'(λ (re im) (sqrt (+ (* re re) (* im im))))
'(λ (re im) (if (<= re -3.740708286200945e+123) (- re) (if (<= re 5.824662638159158e+130) (sqrt (+ (* im im) (* re re))) re)))
#f
'(λ (re im) (sqrt.p16 (+.p16 (*.p16 re re) (*.p16 im im))))
'(λ (re im) (sqrt (+ (* re re) (* im im))))
'(λ (re im) (if (<= re -3.740708286200945e+123) (- re) (if (<= re 5.824662638159158e+130) (sqrt (+ (* im im) (* re re))) re)))
#f
'(λ (re im) (sqrt.p16 (+.p16 (*.p16 re re) (*.p16 im im))))
'(λ (re im) (sqrt (+ (* re re) (* im im))))
'(λ (re im) (if (<= re -3.740708286200945e+123) (- re) (if (<= re 5.824662638159158e+130) (sqrt (+ (* im im) (* re re))) re)))
