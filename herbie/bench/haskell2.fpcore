; -*- mode: scheme -*-

(FPCore  (x y)
 :name "Linear.Projection:perspective from linear-1.19.1.3, A"
 :herbie-target
 (/ 1 (- (/ x (+ x y)) (/ y (+ x y))))
 (/ (+ x y) (- x y)))

(FPCore  (x y)
 :name "Linear.Projection:perspective from linear-1.19.1.3, B"
 :herbie-target
 (if (< x -1.7210442634149447e+81)
   (* (/ (* 2.0 x) (- x y)) y)
   (if (< x 8.364504563556443e+16)
     (/ (* x 2.0) (/ (- x y) y))
     (* (/ (* 2.0 x) (- x y)) y)))
 (/ (* (* x 2.0) y) (- x y)))

(FPCore  (x y)
 :name "Physics.ForceLayout:coulombForce from force-layout-0.4.0.2"
 :herbie-target
 (/ (/ x y) y)
 (/ x (* y y)))

(FPCore  (x y)
 :name "Codec.Picture.Types:toneMapping from JuicyPixels-3.2.6.1"
 :herbie-target
 (* (/ x 1) (/ (+ (/ x y) 1.0) (+ x 1.0)))
 (/ (* x (+ (/ x y) 1.0)) (+ x 1.0)))

(FPCore  (x y z t a b)
 :name "Codec.Picture.Jpg.FastDct:referenceDct from JuicyPixels-3.2.6.1"
 :herbie-target
 (* x (cos (* (/ b 16.0) (/ t (+ (- 1.0 (* a 2.0)) (pow (* a 2.0) 2))))))
 (*
  (* x (cos (/ (* (* (+ (* y 2.0) 1.0) z) t) 16.0)))
  (cos (/ (* (* (+ (* a 2.0) 1.0) b) t) 16.0))))

(FPCore  (x)
 :name "Main:i from "
 (+ (+ (+ (+ x x) x) x) x))

(FPCore  (x y z t)
 :name "Main:z from "
 :herbie-target
 (+
  (+
   (+
    (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))
    (/ 1.0 (+ (sqrt (+ y 1.0)) (sqrt y))))
   (/ 1.0 (+ (sqrt (+ z 1.0)) (sqrt z))))
  (- (sqrt (+ t 1.0)) (sqrt t)))
 (+
  (+
   (+ (- (sqrt (+ x 1.0)) (sqrt x)) (- (sqrt (+ y 1.0)) (sqrt y)))
   (- (sqrt (+ z 1.0)) (sqrt z)))
  (- (sqrt (+ t 1.0)) (sqrt t))))

(FPCore  (x y z t a b c i)
 :name "Diagrams.ThreeD.Shapes:frustum from diagrams-lib-1.3.0.3, A"
 :herbie-target
 (* 2.0 (- (+ (* x y) (* z t)) (* (+ a (* b c)) (* c i))))
 (* 2.0 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))))

(FPCore  (x y z)
 :name "Diagrams.ThreeD.Shapes:frustum from diagrams-lib-1.3.0.3, B"
 (+ x (* (- y x) z)))

(FPCore  (x y z)
 :name "Diagrams.ThreeD.Transform:aboutY from diagrams-lib-1.3.0.3"
 (+ (* x (cos y)) (* z (sin y))))

(FPCore  (x y z)
 :name "Diagrams.ThreeD.Transform:aboutX from diagrams-lib-1.3.0.3, A"
 (- (* x (cos y)) (* z (sin y))))

(FPCore  (x y z)
 :name "Diagrams.ThreeD.Transform:aboutX from diagrams-lib-1.3.0.3, B"
 (+ (* x (sin y)) (* z (cos y))))

(FPCore  (x y z)
 :name "Diagrams.Color.HSV:lerp  from diagrams-contrib-1.3.0.5"
 :herbie-target
 (- y (* x (- y z)))
 (+ (* (- 1.0 x) y) (* x z)))

(FPCore  (x y z)
 :name "Diagrams.TwoD.Segment.Bernstein:evaluateBernstein from diagrams-lib-1.3.0.3"
 :herbie-target
 (if (< x -2.71483106713436e-162)
   (- (* (+ 1 y) (/ x z)) x)
   (if (< x 3.874108816439546e-197)
     (* (* x (+ (- y z) 1.0)) (/ 1 z))
     (- (* (+ 1 y) (/ x z)) x)))
 (/ (* x (+ (- y z) 1.0)) z))

(FPCore  (x y)
 :name "Diagrams.Segment:$catParam from diagrams-lib-1.3.0.3, A"
 :herbie-target
 (* (* x 3.0) (* x y))
 (* (* (* x 3.0) x) y))

(FPCore  (x y)
 :name "Diagrams.Segment:$catParam from diagrams-lib-1.3.0.3, B"
 :herbie-target
 (* (* x (* 3.0 y)) y)
 (* (* (* x 3.0) y) y))

(FPCore  (x)
 :name "Diagrams.Segment:$catParam from diagrams-lib-1.3.0.3, C"
 (* (* x x) x))

(FPCore  (x)
 :name "Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, D"
 :herbie-target
 (+ 3.0 (- (* (* 9.0 x) x) (* 12.0 x)))
 (* 3.0 (+ (- (* (* x 3.0) x) (* x 4.0)) 1.0)))

(FPCore  (x)
 :name "Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, E"
 :herbie-target
 (- (* 6.0 x) (* 9.0 (* x x)))
 (* (* 3.0 (- 2.0 (* x 3.0))) x))

(FPCore  (x)
 :name "Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, F"
 (* (* x 3.0) x))

(FPCore  (x y z t)
 :name "Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, A"
 :herbie-target
 (/ (+ x (- (/ y (- t (/ x z))) (/ x (- (* t z) x)))) (+ x 1.0))
 (/ (+ x (/ (- (* y z) x) (- (* t z) x))) (+ x 1.0)))

(FPCore  (x y)
 :name "Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, B"
 :herbie-target
 (if (< y -3693.8482788297247)
   (- (/ x (* y y)) (- (/ x y) x))
   (if (< y 6799310503.41891)
     (/ (* x y) (+ y 1.0))
     (- (/ x (* y y)) (- (/ x y) x))))
 (/ (* x y) (+ y 1.0)))

(FPCore  (x y)
 :name "Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, C"
 (/ (- x y) (- 1.0 y)))

(FPCore  (x y)
 :name "Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, D"
 :herbie-target
 (if (< y -3693.8482788297247)
   (- (/ 1.0 y) (- (/ x y) x))
   (if (< y 6799310503.41891)
     (- 1.0 (/ (* (- 1.0 x) y) (+ y 1.0)))
     (- (/ 1.0 y) (- (/ x y) x))))
 (- 1.0 (/ (* (- 1.0 x) y) (+ y 1.0))))

(FPCore  (x y)
 :name "Diagrams.TwoD.Arc:bezierFromSweepQ1 from diagrams-lib-1.3.0.3"
 :herbie-target
 (* (/ (- 1.0 x) y) (/ (- 3.0 x) 3.0))
 (/ (* (- 1.0 x) (- 3.0 x)) (* y 3.0)))

(FPCore  (x y)
 :name "Diagrams.TwoD.Arc:arcBetween from diagrams-lib-1.3.0.3"
 :herbie-target
 (if (<
      (/ (- (* x x) (* (* y 4.0) y)) (+ (* x x) (* (* y 4.0) y)))
      0.9743233849626781)
   (-
    (/ (* x x) (+ (* x x) (* (* y y) 4.0)))
    (/ (* (* y y) 4.0) (+ (* x x) (* (* y y) 4.0))))
   (-
    (pow (/ x (sqrt (+ (* x x) (* (* y y) 4.0)))) 2)
    (/ (* (* y y) 4.0) (+ (* x x) (* (* y y) 4.0)))))
 (/ (- (* x x) (* (* y 4.0) y)) (+ (* x x) (* (* y 4.0) y))))

(FPCore  (x)
 :name "Diagrams.TwoD.Ellipse:ellipse from diagrams-lib-1.3.0.3"
 (sqrt (- 1.0 (* x x))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Chart.Axis.Types:invLinMap from Chart-1.5.3"
 :herbie-target
 (if (< z -1.2536131056095036e+188)
   (- t (* (/ y z) (- t x)))
   (if (< z 4.446702369113811e+64)
     (+ x (/ (- y z) (/ (- a z) (- t x))))
     (- t (* (/ y z) (- t x)))))
 (+ x (/ (* (- y z) (- t x)) (- a z))))

(FPCore  (x y z)
 :name "Diagrams.TwoD.Segment:bezierClip from diagrams-lib-1.3.0.3"
 :herbie-target
 (- z (* (- z x) y))
 (+ (* x y) (* z (- 1.0 y))))

(FPCore  (x y)
 :name "Data.Octree.Internal:octantDistance  from Octree-0.5.4.2"
 :herbie-target
 (if (< x -1.1236950826599826e+145)
   (- x)
   (if (< x 1.116557621183362e+93) (sqrt (+ (* x x) (* y y))) x))
 (sqrt (+ (* x x) (* y y))))

(FPCore  (x y)
 :name "Graphics.Rasterific.Shading:$sradialGradientWithFocusShader from Rasterific-0.6.1"
 (- x (* y y)))

(FPCore  (x y)
 :name "Diagrams.TwoD.Path.Metafont.Internal:hobbyF from diagrams-contrib-1.3.0.5"
 (/
  (+
   2.0
   (*
    (*
     (* (sqrt 2.0) (- (sin x) (/ (sin y) 16.0)))
     (- (sin y) (/ (sin x) 16.0)))
    (- (cos x) (cos y))))
  (*
   3.0
   (+
    (+ 1.0 (* (/ (- (sqrt 5.0) 1.0) 2.0) (cos x)))
    (* (/ (- 3.0 (sqrt 5.0)) 2.0) (cos y))))))

(FPCore  (x y)
 :name "Diagrams.TwoD.Layout.CirclePacking:approxRadius from diagrams-contrib-1.3.0.5"
 :herbie-target
 (if (< y -1.2303690911306994e+114)
   1.0
   (if (< y -9.102852406811914e-222)
     (/
      (sin (/ x (* y 2.0)))
      (* (sin (/ x (* y 2.0))) (log (exp (cos (/ x (* y 2.0)))))))
     1.0))
 (/ (tan (/ x (* y 2.0))) (sin (/ x (* y 2.0)))))

(FPCore  (x y z)
 :name "Diagrams.TwoD.Apollonian:descartes from diagrams-contrib-1.3.0.5"
 :herbie-target
 (if (< z 7.636950090573675e+176)
   (* 2.0 (sqrt (+ (* (+ x y) z) (* x y))))
   (*
    (pow
     (+
      (* 1/4 (* (* (pow y -3/4) (* (pow z -3/4) x)) (+ y z)))
      (* (pow z 1/4) (pow y 1/4))) 2)
    2.0))
 (* 2.0 (sqrt (+ (+ (* x y) (* x z)) (* y z)))))

(FPCore  (x y z)
 :name "Diagrams.TwoD.Apollonian:initialConfig from diagrams-contrib-1.3.0.5, A"
 :herbie-target
 (- (* y 0.5) (* (* (/ 0.5 y) (+ z x)) (- z x)))
 (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2.0)))

(FPCore  (x y z)
 :name "Diagrams.TwoD.Apollonian:initialConfig from diagrams-contrib-1.3.0.5, B"
 :herbie-target
 (if (< y 2.5816096488251695e-278)
   (- (* x y))
   (* x (* (sqrt (+ y z)) (sqrt (- y z)))))
 (* x (sqrt (- (* y y) (* z z)))))

(FPCore  (x y z)
 :name "Diagrams.Backend.Rasterific:rasterificRadialGradient from diagrams-rasterific-1.3.1.3"
 :herbie-target
 (- (+ y (/ x z)) (/ y (/ z x)))
 (/ (+ x (* y (- z x))) z))

(FPCore  (x y z t)
 :name "Data.HashTable.ST.Basic:computeOverhead from hashtables-1.2.0.2"
 :herbie-target
 (- (/ (+ (/ 2.0 z) 2.0) t) (- 2.0 (/ x y)))
 (+ (/ x y) (/ (+ 2.0 (* (* z 2.0) (- 1.0 t))) (* t z))))

(FPCore  (x y z t)
 :name "Language.Haskell.HsColour.ColourHighlight:unbase from hscolour-1.23"
 (+ (* (+ (* x y) z) y) t))

(FPCore  (x)
 :name "System.Random.MWC.Distributions:blocks from mwc-random-0.13.3.2"
 (* (* x 0.5) x))

(FPCore  (x y)
 :name "System.Random.MWC.Distributions:standard from mwc-random-0.13.3.2"
 (* 0.5 (- (* x x) y)))

(FPCore  (x y z)
 :name "SynthBasics:oscSampleBasedAux from YampaSynth-0.2"
 (+ x (* y (- z x))))

(FPCore  (x y z t)
 :name "System.Random.MWC.Distributions:truncatedExp from mwc-random-0.13.3.2"
 :herbie-target
 (if (< z -2.8874623088207947e+119)
   (-
    (- x (/ (/ (- 0.5) (* y t)) (* z z)))
    (* (/ (- 0.5) (* y t)) (/ (/ 2.0 z) (* z z))))
   (- x (/ (log (+ 1.0 (* z y))) t)))
 (- x (/ (log (+ (- 1.0 y) (* y (exp z)))) t)))

(FPCore  (x y z)
 :name "System.Random.MWC.Distributions:gamma from mwc-random-0.13.3.2"
 :herbie-target
 (- (+ y (* 0.5 x)) (* y (- z (log z))))
 (+ (* x 0.5) (* y (+ (- 1.0 z) (log z)))))

(FPCore  (x y)
 :name "AI.Clustering.Hierarchical.Internal:average from clustering-0.2.1, A"
 (/ x (+ x y)))

(FPCore  (x)
 :name "Numeric.Integration.TanhSinh:nonNegative from integration-0.2.1"
 (/ x (- 1.0 x)))

(FPCore  (x y z)
 :name "Graphics.Rasterific.QuadraticFormula:discriminant from Rasterific-0.6.1"
 (- (* x x) (* (* y 4.0) z)))

(FPCore  (x y z t a b)
 :name "Graphics.Rasterific.CubicBezier:cachedBezierAt from Rasterific-0.6.1"
 :herbie-target
 (if (< z -1.1820553527347888e+19)
   (+ (* z (+ (* b a) y)) (+ x (* t a)))
   (if (< z 4.7589743188364287e-122)
     (+ (* (+ (* b z) t) a) (+ (* z y) x))
     (+ (* z (+ (* b a) y)) (+ x (* t a)))))
 (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)))

(FPCore  (x)
 :name "Graphics.Rasterific.CubicBezier:isSufficientlyFlat from Rasterific-0.6.1"
 (* (* x 16.0) x))

(FPCore  (x y z)
 :name "Graphics.Rasterific.Shading:$sgradientColorAt from Rasterific-0.6.1"
 :herbie-target
 (- (/ x (- z y)) (/ y (- z y)))
 (/ (- x y) (- z y)))

(FPCore  (x)
 :name "Graphics.Rasterific.Shading:$sradialGradientWithFocusShader from Rasterific-0.6.1, A"
 (+ (* x x) 1.0))

(FPCore  (x y z t)
 :name "Graphics.Rasterific.Shading:$sradialGradientWithFocusShader from Rasterific-0.6.1, B"
 :herbie-target
 (- (* x x) (* 4.0 (* y (- (* z z) t))))
 (- (* x x) (* (* y 4.0) (- (* z z) t))))

(FPCore  (x y)
 :name "Data.Number.Erf:$dmerfcx from erf-2.0.0.0"
 :herbie-target
 (* x (pow (exp y) y))
 (* x (exp (* y y))))

(FPCore  (x y z t)
 :name "Data.Number.Erf:$cinvnormcdf from erf-2.0.0.0, A"
 :herbie-target
 (* (* (- (* x 0.5) y) (sqrt (* z 2.0))) (pow (exp 1) (/ (* t t) 2.0)))
 (* (* (- (* x 0.5) y) (sqrt (* z 2.0))) (exp (/ (* t t) 2.0))))

(FPCore  (x y)
 :name "Data.Number.Erf:$cinvnormcdf from erf-2.0.0.0, B"
 (- x (/ y (+ 1.0 (/ (* x y) 2.0)))))

(FPCore  (x y z t)
 :name "Numeric.AD.Rank1.Halley:findZero from ad-4.2.4"
 :herbie-target
 (- x (/ 1 (- (/ z y) (/ (/ t 2.0) z))))
 (- x (/ (* (* y 2.0) z) (- (* (* z 2.0) z) (* y t)))))

(FPCore  (x y z)
 :name "Crypto.Random.Test:calculate from crypto-random-0.0.9"
 :herbie-target
 (+ x (* y (/ y z)))
 (+ x (/ (* y y) z)))

(FPCore  (x)
 :name "Numeric.Log:$cexpm1 from log-domain-0.10.2.1, A"
 :herbie-target
 (* (* 2.0 x) x)
 (* (* x 2.0) x))

(FPCore  (x y)
 :name "Numeric.Log:$cexpm1 from log-domain-0.10.2.1, B"
 (+ (+ (* x y) x) y))

(FPCore  (x y)
 :name "Numeric.Log:$clog1p from log-domain-0.10.2.1, A"
 :herbie-target
 (+ (* y y) (+ (* 2.0 x) (* x x)))
 (+ (+ (* x 2.0) (* x x)) (* y y)))

(FPCore  (x)
 :name "Numeric.Log:$clog1p from log-domain-0.10.2.1, B"
 (/ x (+ 1.0 (sqrt (+ x 1.0)))))

(FPCore  (x)
 :name "Data.Approximate.Numerics:blog from approximate-0.2.2.1"
 :herbie-target
 (/ 6.0 (/ (+ (+ x 1.0) (* 4.0 (sqrt x))) (- x 1.0)))
 (/ (* 6.0 (- x 1.0)) (+ (+ x 1.0) (* 4.0 (sqrt x)))))

(FPCore  (x)
 :name "Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, A"
 :herbie-target
 (/ (/ (* 8.0 (sin (* x 0.5))) 3.0) (/ (sin x) (sin (* x 0.5))))
 (/ (* (* (/ 8.0 3.0) (sin (* x 0.5))) (sin (* x 0.5))) (sin x)))

(FPCore  (x y z)
 :name "Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, B"
 (- (+ x (cos y)) (* z (sin y))))

(FPCore  (x y z)
 :name "Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, C"
 (+ (+ x (sin y)) (* z (cos y))))

(FPCore  (x y z t)
 :name "Graphics.Rasterific.Svg.PathConverter:arcToSegments from rasterific-svg-0.2.3.1"
 :herbie-target
 (+ (pow (/ x y) 2) (pow (/ z t) 2))
 (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))))

(FPCore  (x)
 :name "Development.Shake.Profile:generateTrace from shake-0.15.5"
 :herbie-target
 0
 (* 1000000.0 (- x x)))

(FPCore  (x y z t a b)
 :name "Development.Shake.Progress:decay from shake-0.15.5"
 :herbie-target
 (- (/ (+ (* z t) (* y x)) (+ y (* z (- b y)))) (/ a (+ (- b y) (/ y z))))
 (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))))

(FPCore  (x y)
 :name "Development.Shake.Progress:message from shake-0.15.5"
 :herbie-target
 (* (/ x 1) (/ 100.0 (+ x y)))
 (/ (* x 100.0) (+ x y)))

(FPCore  (x y z)
 :name "Diagrams.Backend.Rasterific:$crender from diagrams-rasterific-1.3.1.3"
 (+ (* x y) (* (- 1.0 x) z)))

(FPCore  (x y z t)
 :name "Numeric.Histogram:binBounds from Chart-1.5.3"
 :herbie-target
 (if (< x -9.025511195533005e-135)
   (- x (* (/ z t) (- x y)))
   (if (< x 4.275032163700715e-250)
     (+ x (* (/ (- y x) t) z))
     (+ x (/ (- y x) (/ t z)))))
 (+ x (/ (* (- y x) z) t)))

(FPCore  (x y z)
 :name "Graphics.Rendering.Chart.Drawing:drawTextsR from Chart-1.5.3"
 (+ (* x y) (* (- x 1.0) z)))

(FPCore  (x y)
 :name "Graphics.Rendering.Chart.Axis.Types:hBufferRect from Chart-1.5.3"
 :herbie-target
 (- (* 1.5 x) (* 0.5 y))
 (+ x (/ (- x y) 2.0)))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Chart.Axis.Types:linMap from Chart-1.5.3"
 :herbie-target
 (if (< a -1.6153062845442575e-142)
   (+ x (* (/ (- y x) 1) (/ (- z t) (- a t))))
   (if (< a 3.774403170083174e-182)
     (- y (* (/ z t) (- y x)))
     (+ x (* (/ (- y x) 1) (/ (- z t) (- a t))))))
 (+ x (/ (* (- y x) (- z t)) (- a t))))

(FPCore  (x y)
 :name "Graphics.Rendering.Chart.Plot.Vectors:renderPlotVectors from Chart-1.5.3"
 :herbie-target
 (- (* y x) (- y 1.0))
 (+ x (* (- 1.0 x) (- 1.0 y))))

(FPCore  (x y)
 :name "Graphics.Rendering.Chart.Plot.AreaSpots:renderSpotLegend from Chart-1.5.3"
 (+ x (/ (fabs (- y x)) 2.0)))

(FPCore  (x y z t)
 :name "Graphics.Rendering.Chart.Plot.AreaSpots:renderAreaSpots4D from Chart-1.5.3"
 :herbie-target
 (/ x (/ (- t z) (- y z)))
 (/ (* x (- y z)) (- t z)))

(FPCore  (x y)
 :name "Graphics.Rendering.Chart.Plot.Pie:renderPie from Chart-1.5.3"
 :herbie-target
 (- y 0)
 (- (+ x y) x))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Chart.SparkLine:renderSparkLine from Chart-1.5.3"
 :herbie-target
 (- x (* (/ (- y z) (+ (- t z) 1.0)) a))
 (- x (/ (- y z) (/ (+ (- t z) 1.0) a))))

(FPCore  (x y z)
 :name "Graphics.Rendering.Chart.Backend.Diagrams:calcFontMetrics from Chart-diagrams-1.5.1, A"
 :herbie-target
 (if (< y -3.7429310762689856e+171)
   (* (/ (+ y x) (- y)) z)
   (if (< y 3.5534662456086734e+168)
     (/ (+ x y) (- 1.0 (/ y z)))
     (* (/ (+ y x) (- y)) z)))
 (/ (+ x y) (- 1.0 (/ y z))))

(FPCore  (x y z t)
 :name "Graphics.Rendering.Chart.Backend.Diagrams:calcFontMetrics from Chart-diagrams-1.5.1, B"
 :herbie-target
 (if (< (/ (* (/ y z) t) t) -1.20672205123045e+245)
   (/ y (/ z x))
   (if (< (/ (* (/ y z) t) t) -5.907522236933906e-275)
     (* x (/ y z))
     (if (< (/ (* (/ y z) t) t) 5.658954423153415e-65)
       (/ y (/ z x))
       (if (< (/ (* (/ y z) t) t) 2.0087180502407133e+217)
         (* x (/ y z))
         (/ (* y x) z)))))
 (* x (/ (* (/ y z) t) t)))

(FPCore  (x y)
 :name "AI.Clustering.Hierarchical.Internal:average from clustering-0.2.1, B"
 (/ x (+ y x)))

(FPCore  (x y z t a b)
 :name "AI.Clustering.Hierarchical.Internal:ward from clustering-0.2.1"
 :herbie-target
 (if (<
      (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y))
      -3.5813117084150564e+153)
   (- (+ z a) b)
   (if (<
        (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y))
        1.2285964308315609e+82)
     (/ 1 (/ (+ (+ x t) y) (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b))))
     (- (+ z a) b)))
 (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:invErfc from math-functions-0.1.5.2, A"
 :herbie-target
 (+ x (/ 1 (- (* (/ 1.1283791670955126 y) (exp z)) x)))
 (+ x (/ y (- (* 1.1283791670955126 (exp z)) (* x y)))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:invErfc from math-functions-0.1.5.2, B"
 (*
  0.70711
  (- (/ (+ 2.30753 (* x 0.27061)) (+ 1.0 (* x (+ 0.99229 (* x 0.04481))))) x)))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, A"
 (+ (- (* x (- y 1.0)) (* y 0.5)) 0.918938533204673))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, B"
 :herbie-target
 (if (< z -8120153.652456675)
   (-
    (* (+ (/ 0.07512208616047561 z) 0.0692910599291889) y)
    (- (/ (* 0.40462203869992125 y) (* z z)) x))
   (if (< z 6.576118972787377e+20)
     (+
      x
      (*
       (*
        y
        (+
         (* (+ (* z 0.0692910599291889) 0.4917317610505968) z)
         0.279195317918525))
       (/ 1 (+ (* (+ z 6.012459259764103) z) 3.350343815022304))))
     (-
      (* (+ (/ 0.07512208616047561 z) 0.0692910599291889) y)
      (- (/ (* 0.40462203869992125 y) (* z z)) x))))
 (+
  x
  (/
   (*
    y
    (+
     (* (+ (* z 0.0692910599291889) 0.4917317610505968) z)
     0.279195317918525))
   (+ (* (+ z 6.012459259764103) z) 3.350343815022304))))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, C"
 :herbie-target
 (if (< x -3.326128725870005e+62)
   (- (+ (/ y (* x x)) (* 4.16438922228 x)) 110.1139242984811)
   (if (< x 9.429991714554673e+55)
     (*
      (/ (- x 2.0) 1)
      (/
       (+
        (*
         (+
          (* (+ (* (+ (* x 4.16438922228) 78.6994924154) x) 137.519416416) x)
          y)
         x)
        z)
       (+
        (*
         (+
          (+ (* 263.505074721 x) (+ (* 43.3400022514 (* x x)) (* x (* x x))))
          313.399215894)
         x)
        47.066876606)))
     (- (+ (/ y (* x x)) (* 4.16438922228 x)) 110.1139242984811)))
 (/
  (*
   (- x 2.0)
   (+
    (*
     (+ (* (+ (* (+ (* x 4.16438922228) 78.6994924154) x) 137.519416416) x) y)
     x)
    z))
  (+
   (* (+ (* (+ (* (+ x 43.3400022514) x) 263.505074721) x) 313.399215894) x)
   47.066876606)))
