; -*- mode: scheme -*-

(FPCore (x y)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, A"
 (sqrt (+ x y)))

(FPCore (x y z t)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, B"
 (/ (- (+ x y) z) (* t 2.0)))

(FPCore (x y)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, C"
 (sqrt (fabs (- x y))))


(FPCore (x y z t)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, D"
 :herbie-target
 (- x (+ (* x (/ y t)) (* (- z) (/ y t))))
 (+ x (/ (* y (- z x)) t)))

(FPCore  (x y z t a)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, E"
 :herbie-target
 (if (< y -1.0761266216389975e-10)
   (+ x (/ 1 (/ (/ a (- z t)) y)))
   (if (< y 2.894426862792089e-49)
     (+ x (/ (* y (- z t)) a))
     (+ x (/ y (/ a (- z t))))))
 (+ x (/ (* y (- z t)) a)))

(FPCore  (x y z t a)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, F"
 :herbie-target
 (if (< y -1.0761266216389975e-10)
   (- x (/ 1 (/ (/ a (- z t)) y)))
   (if (< y 2.894426862792089e-49)
     (- x (/ (* y (- z t)) a))
     (- x (/ y (/ a (- z t))))))
 (- x (/ (* y (- z t)) a)))

(FPCore  (x y z)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, G"
 (* (+ x y) (+ z 1.0)))

(FPCore  (x y z)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, H"
 (* (+ x y) (- 1.0 z)))

(FPCore  (x y z)
 :name "Optimisation.CirclePacking:place from circle-packing-0.1.0.4, I"
 (+ (+ x y) z))

(FPCore  (x y z t a b c i j)
 :name "Data.Colour.Matrix:determinant from colour-2.3.3, A"
 :herbie-target
 (if (< x -1.469694296777705e-64)
   (+
    (-
     (* x (- (* y z) (* t a)))
     (/ (* b (- (pow (* c z) 2) (pow (* t i) 2))) (+ (* c z) (* t i))))
    (* j (- (* c a) (* y i))))
   (if (< x 3.2113527362226803e-147)
     (- (* (- (* b i) (* x a)) t) (- (* z (* c b)) (* j (- (* c a) (* y i)))))
     (+
      (-
       (* x (- (* y z) (* t a)))
       (/ (* b (- (pow (* c z) 2) (pow (* t i) 2))) (+ (* c z) (* t i))))
      (* j (- (* c a) (* y i))))))
 (+
  (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i))))
  (* j (- (* c a) (* y i)))))

(FPCore  (x y z t a)
 :name "Data.Colour.Matrix:inverse from colour-2.3.3, B"
 :herbie-target
 (if (< z -2.468684968699548e+170)
   (- (* (/ y a) x) (* (/ t a) z))
   (if (< z 6.309831121978371e-71)
     (/ (- (* x y) (* z t)) a)
     (- (* (/ y a) x) (* (/ t a) z))))
 (/ (- (* x y) (* z t)) a))

(FPCore  (x y)
 :name "Data.Colour.CIE.Chromaticity:chromaCoords from colour-2.3.3"
 (- (- 1.0 x) y))

(FPCore  (x y)
 :name "Data.Colour.RGB:hslsv from colour-2.3.3, A"
 (/ (+ x y) 2.0))

(FPCore  (x y z t a)
 :name "Data.Colour.RGB:hslsv from colour-2.3.3, B"
 :herbie-target
 (+ (/ 60.0 (/ (- z t) (- x y))) (* a 120.0))
 (+ (/ (* 60.0 (- x y)) (- z t)) (* a 120.0)))

(FPCore  (x y)
 :name "Data.Colour.RGB:hslsv from colour-2.3.3, C"
 :herbie-target
 (- (/ x (- 2.0 (+ x y))) (/ y (- 2.0 (+ x y))))
 (/ (- x y) (- 2.0 (+ x y))))

(FPCore  (x y)
 :name "Data.Colour.RGB:hslsv from colour-2.3.3, D"
 :herbie-target
 (- (/ x (+ x y)) (/ y (+ x y)))
 (/ (- x y) (+ x y)))

(FPCore  (x y)
 :name "Data.Colour.RGB:hslsv from colour-2.3.3, E"
 :herbie-target
 (- 1 (/ y x))
 (/ (- x y) x))

(FPCore  (x y)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, A"
 (- (+ x y) (* x y)))

(FPCore  (x y)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, B"
 :herbie-target
 (+ x (* x y))
 (* x (+ y 1.0)))

(FPCore  (x y)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, C"
 (- (* x 2.0) y))

(FPCore  (x y z)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, D"
 (+ x (* (* (- y x) 6.0) (- (/ 2.0 3.0) z))))

(FPCore  (x y z)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, E"
 :herbie-target
 (- x (* (* 6.0 z) (- x y)))
 (+ x (* (* (- y x) 6.0) z)))

(FPCore  (x)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, F"
 (+ x (/ 1.0 3.0)))

(FPCore  (x)
 :name "Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, G"
 (- x (/ 1.0 3.0)))

(FPCore  (x y)
 :name "Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, H"
 (* x (- 1.0 y)))

(FPCore  (x y z)
 :name "Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, I"
 (* x (- 1.0 (* y z))))

(FPCore  (x y z)
 :name "Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, J"
 :herbie-target
 (if (< (* x (- 1.0 (* (- 1.0 y) z))) -1.618195973607049e+50)
   (+ x (* (- 1.0 y) (* (- z) x)))
   (if (< (* x (- 1.0 (* (- 1.0 y) z))) 3.892237649663903e+134)
     (- (* (* x y) z) (- (* x z) x))
     (+ x (* (- 1.0 y) (* (- z) x)))))
 (* x (- 1.0 (* (- 1.0 y) z))))

(FPCore  (x y)
 :name "Data.Colour.SRGB:invTransferFunction from colour-2.3.3"
 (/ (+ x y) (+ y 1.0)))

(FPCore  (x y)
 :name "Data.Colour.SRGB:transferFunction from colour-2.3.3"
 (- (* (+ x 1.0) y) x))

(FPCore  (x)
 :name "Data.Colour.CIE:lightness from colour-2.3.3"
 (- (* x 116.0) 16.0))

(FPCore  (x)
 :name "Data.Colour.CIE:cieLABView from colour-2.3.3, A"
 (+ (* (/ 841.0 108.0) x) (/ 4.0 29.0)))

(FPCore  (x y)
 :name "Data.Colour.CIE:cieLABView from colour-2.3.3, B"
 (* 500.0 (- x y)))

(FPCore  (x y)
 :name "Data.Colour.CIE:cieLABView from colour-2.3.3, C"
 (* 200.0 (- x y)))

(FPCore  (x y)
 :name "Data.Colour.CIE:cieLAB from colour-2.3.3, A"
 :herbie-target
 (* y (- (* x 3.0) 0.41379310344827586))
 (* (* (- x (/ 16.0 116.0)) 3.0) y))

(FPCore  (x)
 :name "Data.Colour.CIE:cieLAB from colour-2.3.3, B"
 (/ (+ x 16.0) 116.0))

(FPCore  (x y)
 :name "Data.Colour.CIE:cieLAB from colour-2.3.3, C"
 (+ x (/ y 500.0)))

(FPCore  (x y)
 :name "Data.Colour.CIE:cieLAB from colour-2.3.3, D"
 (- x (/ y 200.0)))

(FPCore  (x y z t a)
 :name "Diagrams.Solve.Tridiagonal:solveTriDiagonal from diagrams-solve-0.1, A"
 :herbie-target
 (if (< z -32113435955957344.0)
   (- (/ x (- t (* a z))) (/ y (- (/ t z) a)))
   (if (< z 3.5139522372978296e-86)
     (* (- x (* y z)) (/ 1 (- t (* a z))))
     (- (/ x (- t (* a z))) (/ y (- (/ t z) a)))))
 (/ (- x (* y z)) (- t (* a z))))

(FPCore  (x y z t)
 :name "Diagrams.Solve.Tridiagonal:solveTriDiagonal from diagrams-solve-0.1, B"
 :herbie-target
 (if (< x -1.618195973607049e+50)
   (/ 1 (- (/ y x) (* (/ z x) t)))
   (if (< x 2.1378306434876444e+131)
     (/ x (- y (* z t)))
     (/ 1 (- (/ y x) (* (/ z x) t)))))
 (/ x (- y (* z t))))

(FPCore  (x y z)
 :name "Diagrams.Solve.Tridiagonal:solveTriDiagonal from diagrams-solve-0.1, C"
 :herbie-target
 (/ (+ x (* y z)) (/ (+ x (* y z)) (- x (* y z))))
 (- x (* y z)))

(FPCore  (x y z)
 :name "Diagrams.Solve.Tridiagonal:solveCyclicTriDiagonal from diagrams-solve-0.1, A"
 :herbie-target
 (if (< z -4.262230790519429e-138)
   (/ (* x y) z)
   (if (< z 1.7042130660650472e-164) (/ x (/ z y)) (* (/ x z) y)))
 (/ (* x y) z))

(FPCore  (x y z t a b)
 :name "Diagrams.Solve.Tridiagonal:solveCyclicTriDiagonal from diagrams-solve-0.1, B"
 :herbie-target
 (if (< t -1.3659085366310088e-271)
   (* 1 (* (+ x (* (/ y t) z)) (/ 1 (+ (+ a 1.0) (* (/ y t) b)))))
   (if (< t 3.036967103737246e-130)
     (/ z b)
     (* 1 (* (+ x (* (/ y t) z)) (/ 1 (+ (+ a 1.0) (* (/ y t) b)))))))
 (/ (+ x (/ (* y z) t)) (+ (+ a 1.0) (/ (* y b) t))))

(FPCore  (x y z)
 :name "Diagrams.Solve.Polynomial:quadForm from diagrams-solve-0.1, A"
 (- x (* (* y 4.0) z)))

(FPCore  (x y z)
 :name "Diagrams.Solve.Polynomial:quadForm from diagrams-solve-0.1, B"
 (* (/ 1.0 2.0) (+ x (* y (sqrt z)))))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:quadForm from diagrams-solve-0.1, C"
 (/ x (* y 2.0)))

(FPCore  (x y z t a b)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, A"
 :herbie-target
 (if (< y 7.590524218811189e-161)
   (+ (- (* x 2.0) (* (* (* y 9.0) z) t)) (* a (* 27.0 b)))
   (+ (- (* x 2.0) (* 9.0 (* y (* t z)))) (* (* a 27.0) b)))
 (+ (- (* x 2.0) (* (* (* y 9.0) z) t)) (* (* a 27.0) b)))

(FPCore  (x y z)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, B"
 :herbie-target
 (- (* x (* 3.0 y)) z)
 (- (* (* x 3.0) y) z))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, C"
 :herbie-target
 (/ (/ x y) 3.0)
 (/ x (* y 3.0)))

(FPCore  (x y z t)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, D"
 :herbie-target
 (/ (acos (* (/ (/ x 27.0) (* y z)) (/ (sqrt t) (/ 2.0 3.0)))) 3.0)
 (* (/ 1.0 3.0) (acos (* (/ (* 3.0 (/ x (* y 27.0))) (* z 2.0)) (sqrt t)))))

(FPCore  (x y z t a b c i j k)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, E"
 :herbie-target
 (if (< t -1.6210815397541398e-69)
   (-
    (- (* (* 18.0 t) (* (* x y) z)) (* (+ (* a t) (* i x)) 4.0))
    (- (* (* k j) 27.0) (* c b)))
   (if (< t 165.68027943805222)
     (+
      (- (* (* 18.0 y) (* x (* z t))) (* (+ (* a t) (* i x)) 4.0))
      (- (* c b) (* 27.0 (* k j))))
     (-
      (- (* (* 18.0 t) (* (* x y) z)) (* (+ (* a t) (* i x)) 4.0))
      (- (* (* k j) 27.0) (* c b)))))
 (-
  (-
   (+ (- (* (* (* (* x 18.0) y) z) t) (* (* a 4.0) t)) (* b c))
   (* (* x 4.0) i))
  (* (* j 27.0) k)))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, F"
 (* (* x 27.0) y))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, G"
 :herbie-target
 (/ (+ x y) 2.0)
 (* (/ 1.0 2.0) (+ x y)))

(FPCore  (x y z t)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, H"
 :herbie-target
 (+ (- x (/ y (* z 3.0))) (/ (/ t (* z 3.0)) y))
 (+ (- x (/ y (* z 3.0))) (/ t (* (* z 3.0) y))))

(FPCore  (x y z t a)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, I"
 :herbie-target
 (if (< a -2.090464557976709e+86)
   (- (* 0.5 (/ (* y x) a)) (* 4.5 (/ t (/ a z))))
   (if (< a 2.144030707833976e+99)
     (/ (- (* x y) (* z (* 9.0 t))) (* a 2.0))
     (- (* (/ y a) (* x 0.5)) (* (/ t a) (* z 4.5)))))
 (/ (- (* x y) (* (* z 9.0) t)) (* a 2.0)))

(FPCore  (x y z t a b c)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, J"
 :herbie-target
 (if (<
      (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c))
      -1.100156740804105e-171)
   (/ (+ (- (* (* x 9.0) y) (* (* z 4.0) (* t a))) b) (* z c))
   (if (< (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c)) -0.0)
     (/ (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) z) c)
     (if (<
          (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c))
          1.1708877911747488e-53)
       (/ (+ (- (* (* x 9.0) y) (* (* z 4.0) (* t a))) b) (* z c))
       (if (<
            (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c))
            2.876823679546137e+130)
         (-
          (+ (* (* 9.0 (/ y c)) (/ x z)) (/ b (* c z)))
          (* 4.0 (/ (* a t) c)))
         (if (<
              (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c))
              1.3838515042456319e+158)
           (/ (+ (- (* (* x 9.0) y) (* (* z 4.0) (* t a))) b) (* z c))
           (-
            (+ (* 9.0 (* (/ y (* c z)) x)) (/ b (* c z)))
            (* 4.0 (/ (* a t) c))))))))
 (/ (+ (- (* (* x 9.0) y) (* (* (* z 4.0) t) a)) b) (* z c)))

(FPCore  (x y z t a b)
 :name "Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, K"
 :herbie-target
 (if (< z -1.3793337487235141e+129)
   (-
    (* (* 2.0 (sqrt x)) (cos (- (/ 1 y) (/ (/ 0.3333333333333333 z) t))))
    (/ (/ a 3.0) b))
   (if (< z 3.516290613555987e+106)
     (- (* (* (sqrt x) 2.0) (cos (- y (* (/ t 3.0) z)))) (/ (/ a 3.0) b))
     (-
      (* (cos (- y (/ (/ 0.3333333333333333 z) t))) (* 2.0 (sqrt x)))
      (/ (/ a b) 3.0))))
 (- (* (* 2.0 (sqrt x)) (cos (- y (/ (* z t) 3.0)))) (/ a (* b 3.0))))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, A"
 (- x (* (/ 3.0 8.0) y)))

(FPCore  (x y z t)
 :name "Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, B"
 :herbie-target
 (- (+ (/ x 8.0) t) (* (/ z 2.0) y))
 (+ (- (* (/ 1.0 8.0) x) (/ (* y z) 2.0)) t))

(FPCore  (x y z t a b c)
 :name "Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, C"
 (+ (- (+ (* x y) (/ (* z t) 16.0)) (/ (* a b) 4.0)) c))

(FPCore  (x y z)
 :name "Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, D"
 (- (/ (* x y) 2.0) (/ z 8.0)))

(FPCore  (x y)
 :name "Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, E"
 (- x (/ y 4.0)))

(FPCore  (x y)
 :name "Text.Parsec.Token:makeTokenParser from parsec-3.1.9, A"
 (/ (+ x y) 10.0))

(FPCore  (x y z)
 :name "Text.Parsec.Token:makeTokenParser from parsec-3.1.9, B"
 (* (+ x y) z))

(FPCore  (x y)
 :name "Numeric.Interval.Internal:bisect from intervals-0.7.1, A"
 :herbie-target
 (* 0.5 (+ x y))
 (+ x (/ (- y x) 2.0)))

(FPCore  (x y)
 :name "Numeric.Interval.Internal:scale from intervals-0.7.1, B"
 (/ (* x y) 2.0))

(FPCore  (x y z t)
 :name "Linear.V2:$cdot from linear-1.19.1.3, A"
 (+ (* x y) (* z t)))

(FPCore  (x y z t)
 :name "Linear.V3:cross from linear-1.19.1.3"
 (- (* x y) (* z t)))

(FPCore  (x y z t a b)
 :name "Linear.V3:$cdot from linear-1.19.1.3, B"
 (+ (+ (* x y) (* z t)) (* a b)))

(FPCore  (x y z t a b c i)
 :name "Linear.V4:$cdot from linear-1.19.1.3, C"
 (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)))

(FPCore  (x y z)
 :name "Main:bigenough2 from A"
 (+ x (* y (+ z x))))

(FPCore (x) :name "Main:bigenough1 from B" (+ x (* x x)))

(FPCore  (x)
 :name "Main:bigenough3 from C"
 :herbie-target
 (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))
 (- (sqrt (+ x 1.0)) (sqrt x)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$c/ from linear-1.19.1.3, A"
 :herbie-target
 (+ (* (* 3 z) z) (* y x))
 (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$c/ from linear-1.19.1.3, B"
 :herbie-target
 (* (- x z) y)
 (+ (- (- (* x y) (* y z)) (* y y)) (* y y)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$c/ from linear-1.19.1.3, C"
 :herbie-target
 (* (- x z) y)
 (- (- (+ (* x y) (* y y)) (* y z)) (* y y)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$c/ from linear-1.19.1.3, D"
 :herbie-target
 (* (- x z) y)
 (- (+ (- (* x y) (* y y)) (* y y)) (* y z)))

(FPCore  (x y)
 :name "Linear.Quaternion:$c/ from linear-1.19.1.3, E"
 :herbie-target
 (+ (* x x) (* y (+ y (+ y y))))
 (+ (+ (+ (* x x) (* y y)) (* y y)) (* y y)))

(FPCore  (x y)
 :name "Graphics.Rasterific.Linear:$cquadrance from Rasterific-0.6.1"
 (+ (* x x) (* y y)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$ctanh from linear-1.19.1.3"
 :herbie-target
 (if (< z -4.2173720203427147e-29)
   (/ (* x (/ 1 (/ y (sin y)))) z)
   (if (< z 4.446702369113811e+64)
     (/ x (* z (/ y (sin y))))
     (/ (* x (/ 1 (/ y (sin y)))) z)))
 (/ (* x (/ (sin y) y)) z))

(FPCore  (x y)
 :name "Linear.Quaternion:$ccosh from linear-1.19.1.3"
 :herbie-target
 (* (sin x) (/ (sinh y) x))
 (/ (* (sin x) (sinh y)) x))

(FPCore  (x y)
 :name "Linear.Quaternion:$csinh from linear-1.19.1.3"
 :herbie-target
 (/ (* (cosh x) (sin y)) y)
 (* (cosh x) (/ (sin y) y)))

(FPCore  (x y z)
 :name "Linear.Quaternion:$ctan from linear-1.19.1.3"
 :herbie-target
 (if (< y -4.618902267687042e-52)
   (* (/ (/ y z) x) (cosh x))
   (if (< y 1.038530535935153e-39)
     (/ (/ (* (cosh x) y) x) z)
     (* (/ (/ y z) x) (cosh x))))
 (/ (* (cosh x) (/ y x)) z))

(FPCore  (x y)
 :name "Linear.Quaternion:$ccos from linear-1.19.1.3"
 (* (sin x) (/ (sinh y) y)))

(FPCore  (x y)
 :name "Linear.Quaternion:$csin from linear-1.19.1.3"
 (* (cos x) (/ (sinh y) y)))

(FPCore  (x y)
 :name "Linear.Quaternion:$clog from linear-1.19.1.3"
 :herbie-target
 (if (< x -1.5097698010472593e+153)
   (- (+ (* 1/2 (/ y x)) x))
   (if (< x 5.582399551122541e+57) (sqrt (+ (* x x) y)) (+ (* 1/2 (/ y x)) x)))
 (sqrt (+ (* x x) y)))

(FPCore  (x y)
 :name "Linear.Quaternion:$cexp from linear-1.19.1.3"
 (* x (/ (sin y) y)))

(FPCore  (x y z t a b c i j k y0 y1 y2 y3 y4 y5)
 :name "Linear.Matrix:det44 from linear-1.19.1.3"
 :herbie-target
 (if (< y4 -7.206256231996481e+60)
   (-
    (-
     (* (- (* b a) (* i c)) (- (* y x) (* t z)))
     (-
      (* (- (* j x) (* k z)) (- (* y0 b) (* i y1)))
      (* (- (* j t) (* k y)) (- (* y4 b) (* y5 i)))))
    (-
     (/ (- (* y2 t) (* y3 y)) (/ 1 (- (* y4 c) (* y5 a))))
     (* (- (* y2 k) (* y3 j)) (- (* y4 y1) (* y5 y0)))))
   (if (< y4 -3.364603505246317e-66)
     (+
      (-
       (- (- (* (* t c) (* i z)) (* (* a t) (* b z))) (* (* y c) (* i x)))
       (* (- (* b y0) (* i y1)) (- (* j x) (* k z))))
      (-
       (* (- (* y0 c) (* a y1)) (- (* x y2) (* z y3)))
       (-
        (* (- (* t y2) (* y y3)) (- (* y4 c) (* a y5)))
        (* (- (* y1 y4) (* y5 y0)) (- (* k y2) (* j y3))))))
     (if (< y4 -1.2000065055686116e-105)
       (+
        (+
         (-
          (* (- (* j t) (* k y)) (- (* y4 b) (* y5 i)))
          (* (* y3 y) (- (* y5 a) (* y4 c))))
         (+
          (* (* y5 a) (* t y2))
          (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))))
        (-
         (* (- (* x y2) (* z y3)) (- (* c y0) (* a y1)))
         (-
          (* (- (* b y0) (* i y1)) (- (* j x) (* k z)))
          (* (- (* y x) (* z t)) (- (* b a) (* i c))))))
       (if (< y4 6.718963124057495e-279)
         (+
          (-
           (-
            (- (* (* k y) (* y5 i)) (* (* y b) (* y4 k)))
            (* (* y5 t) (* i j)))
           (-
            (* (- (* y2 t) (* y3 y)) (- (* y4 c) (* y5 a)))
            (* (- (* y2 k) (* y3 j)) (- (* y4 y1) (* y5 y0)))))
          (-
           (* (- (* b a) (* i c)) (- (* y x) (* t z)))
           (-
            (* (- (* j x) (* k z)) (- (* y0 b) (* i y1)))
            (* (- (* y2 x) (* y3 z)) (- (* c y0) (* y1 a))))))
         (if (< y4 4.77962681403792e-222)
           (+
            (+
             (-
              (* (- (* j t) (* k y)) (- (* y4 b) (* y5 i)))
              (* (* y3 y) (- (* y5 a) (* y4 c))))
             (+
              (* (* y5 a) (* t y2))
              (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))))
            (-
             (* (- (* x y2) (* z y3)) (- (* c y0) (* a y1)))
             (-
              (* (- (* b y0) (* i y1)) (- (* j x) (* k z)))
              (* (- (* y x) (* z t)) (- (* b a) (* i c))))))
           (if (< y4 2.2852241541266835e-175)
             (+
              (-
               (-
                (- (* (* k y) (* y5 i)) (* (* y b) (* y4 k)))
                (* (* y5 t) (* i j)))
               (-
                (* (- (* y2 t) (* y3 y)) (- (* y4 c) (* y5 a)))
                (* (- (* y2 k) (* y3 j)) (- (* y4 y1) (* y5 y0)))))
              (-
               (* (- (* b a) (* i c)) (- (* y x) (* t z)))
               (-
                (* (- (* j x) (* k z)) (- (* y0 b) (* i y1)))
                (* (- (* y2 x) (* y3 z)) (- (* c y0) (* y1 a))))))
             (+
              (-
               (+
                (+
                 (-
                  (* (- (* x y) (* z t)) (- (* a b) (* c i)))
                  (-
                   (* k (* i (* z y1)))
                   (+ (* j (* i (* x y1))) (* y0 (* k (* z b))))))
                 (-
                  (* z (* y3 (* a y1)))
                  (+ (* y2 (* x (* a y1))) (* y0 (* z (* c y3))))))
                (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i))))
               (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a))))
              (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0))))))))))
 (+
  (-
   (+
    (+
     (-
      (* (- (* x y) (* z t)) (- (* a b) (* c i)))
      (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i))))
     (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a))))
    (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i))))
   (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a))))
  (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))))

(FPCore  (x y z t a b c i j)
 :name "Linear.Matrix:det33 from linear-1.19.1.3"
 :herbie-target
 (if (< t -8.120978919195912e-33)
   (-
    (* x (- (* z y) (* a t)))
    (- (* b (- (* z c) (* a i))) (* (- (* c t) (* y i)) j)))
   (if (< t -4.712553818218485e-169)
     (+
      (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a))))
      (/ (* j (- (pow (* c t) 2) (pow (* i y) 2))) (+ (* c t) (* i y))))
     (if (< t -7.633533346031584e-308)
       (-
        (* x (- (* z y) (* a t)))
        (- (* b (- (* z c) (* a i))) (* (- (* c t) (* y i)) j)))
       (if (< t 1.0535888557455487e-139)
         (+
          (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a))))
          (/ (* j (- (pow (* c t) 2) (pow (* i y) 2))) (+ (* c t) (* i y))))
         (-
          (* x (- (* z y) (* a t)))
          (- (* b (- (* z c) (* a i))) (* (- (* c t) (* y i)) j)))))))
 (+
  (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a))))
  (* j (- (* c t) (* i y)))))

(FPCore  (x y)
 :name "Linear.Matrix:fromQuaternion from linear-1.19.1.3, A"
 :herbie-target
 (* (* x 2.0) (- x y))
 (* 2.0 (- (* x x) (* x y))))

(FPCore  (x y)
 :name "Linear.Matrix:fromQuaternion from linear-1.19.1.3, B"
 :herbie-target
 (* (* x 2.0) (+ x y))
 (* 2.0 (+ (* x x) (* x y))))

(FPCore  (x y z t)
 :name "Linear.Projection:inverseInfinitePerspective from linear-1.19.1.3"
 :herbie-target
 (if (< t -9.231879582886777e-80)
   (* (* y t) (- x z))
   (if (< t 2.543067051564877e+83) (* y (* t (- x z))) (* (* y (- x z)) t)))
 (* (- (* x y) (* z y)) t))

(FPCore  (x y z t)
 :name "Linear.Projection:infinitePerspective from linear-1.19.1.3, A"
 :herbie-target
 (if (< (/ (* x 2.0) (- (* y z) (* t z))) -2.559141628295061e-13)
   (* (/ x (* (- y t) z)) 2.0)
   (if (< (/ (* x 2.0) (- (* y z) (* t z))) 1.045027827330126e-269)
     (/ (* (/ x z) 2.0) (- y t))
     (* (/ x (* (- y t) z)) 2.0)))
 (/ (* x 2.0) (- (* y z) (* t z))))

(FPCore  (x y)
 :name "Linear.Projection:inversePerspective from linear-1.19.1.3, B"
 :herbie-target
 (- (/ 0.5 y) (/ 0.5 x))
 (/ (- x y) (* (* x 2.0) y)))

(FPCore  (x y)
 :name "Linear.Projection:inversePerspective from linear-1.19.1.3, C"
 :herbie-target
 (+ (/ 0.5 x) (/ 0.5 y))
 (/ (+ x y) (* (* x 2.0) y)))
