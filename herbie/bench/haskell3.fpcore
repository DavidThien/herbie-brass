; -*- mode: scheme -*-

(FPCore  (x y z t a b)
 :name "Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, D"
 :herbie-target
 (if (< z -6.499344996252632e+53)
   (+
    x
    (* (+ (- 3.13060547623 (/ 36.527041698806414 z)) (/ t (* z z))) (/ y 1)))
   (if (< z 7.066965436914287e+59)
     (+
      x
      (/
       y
       (/
        (+
         (*
          (+ (* (+ (* (+ z 15.234687407) z) 31.4690115749) z) 11.9400905721)
          z)
         0.607771387771)
        (+
         (* (+ (* (+ (* (+ (* z 3.13060547623) 11.1667541262) z) t) z) a) z)
         b))))
     (+
      x
      (*
       (+ (- 3.13060547623 (/ 36.527041698806414 z)) (/ t (* z z)))
       (/ y 1)))))
 (+
  x
  (/
   (*
    y
    (+ (* (+ (* (+ (* (+ (* z 3.13060547623) 11.1667541262) z) t) z) a) z) b))
   (+
    (* (+ (* (+ (* (+ z 15.234687407) z) 31.4690115749) z) 11.9400905721) z)
    0.607771387771))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:$slogFactorial from math-functions-0.1.5.2, A"
 :herbie-target
 (/ (/ 1.0 x) x)
 (/ 1.0 (* x x)))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:$slogFactorial from math-functions-0.1.5.2, B"
 :herbie-target
 (+
  (+ (+ (* (- x 0.5) (log x)) (- 0.91893853320467 x)) (/ 0.083333333333333 x))
  (* (/ z x) (- (* z (+ y 0.0007936500793651)) 0.0027777777777778)))
 (+
  (+ (- (* (- x 0.5) (log x)) x) 0.91893853320467)
  (/
   (+
    (* (- (* (+ y 0.0007936500793651) z) 0.0027777777777778) z)
    0.083333333333333)
   x)))

(FPCore  (x y z t a)
 :name "Numeric.SpecFunctions:logGammaL from math-functions-0.1.5.2"
 :herbie-target
 (+ (log (+ x y)) (+ (- (log z) t) (* (- a 0.5) (log t))))
 (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 0.5) (log t))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:logGammaCorrection from math-functions-0.1.5.2"
 (- (* (* x x) 2.0) 1.0))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:log1p from math-functions-0.1.5.2, A"
 (* x (- 1.0 (* x y))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:log1p from math-functions-0.1.5.2, B"
 (* x (- 1.0 (* x 0.5))))

(FPCore  (x y z t a b)
 :name "Numeric.SpecFunctions:logBeta from math-functions-0.1.5.2, A"
 :herbie-target
 (+ (+ (+ x y) (/ (* (- 1 (pow (log t) 2)) z) (+ 1 (log t)))) (* (- a 0.5) b))
 (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 0.5) b)))

(FPCore  (x y z t a b c i)
 :name "Numeric.SpecFunctions:logBeta from math-functions-0.1.5.2, B"
 (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 0.5) (log c))) (* y i)))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:choose from math-functions-0.1.5.2"
 :herbie-target
 (/ x (/ z (+ y z)))
 (/ (* x (+ y z)) z))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:stirlingError from math-functions-0.1.5.2"
 :herbie-target
 (- (- (+ y x) z) (* (+ y 0.5) (log y)))
 (- (+ (- x (* (+ y 0.5) (log y))) y) z))

(FPCore  (x y z t)
 :name "Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, A"
 (+ (- (- (* x (log y)) y) z) (log t)))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, B"
 :herbie-target
 (* 3.0 (+ (* y (sqrt x)) (* (- (/ 1.0 (* x 9.0)) 1.0) (sqrt x))))
 (* (* 3.0 (sqrt x)) (- (+ y (/ 1.0 (* x 9.0))) 1.0)))

(FPCore  (x)
 :name "Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, A"
 (- 1.0 (* x (+ 0.253 (* x 0.12)))))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, B"
 :herbie-target
 (if (< y -81284752.61947241)
   (- 1.0 (log (- (/ x (* y y)) (- (/ 1.0 y) (/ x y)))))
   (if (< y 3.0094271212461764e+25)
     (log (/ (exp 1.0) (- 1.0 (/ (- x y) (- 1.0 y)))))
     (- 1.0 (log (- (/ x (* y y)) (- (/ 1.0 y) (/ x y)))))))
 (- 1.0 (log (- 1.0 (/ (- x y) (- 1.0 y))))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, C"
 (- (/ (+ 2.30753 (* x 0.27061)) (+ 1.0 (* x (+ 0.99229 (* x 0.04481))))) x))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, D"
 :herbie-target
 (- (- 1.0 (/ (/ 1.0 x) 9.0)) (/ y (* 3.0 (sqrt x))))
 (- (- 1.0 (/ 1.0 (* x 9.0))) (/ y (* 3.0 (sqrt x)))))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:incompleteBetaApprox from math-functions-0.1.5.2, A"
 :herbie-target
 (/ (/ (/ x (+ (+ y 1) x)) (+ y x)) (/ 1 (/ y (+ y x))))
 (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1.0))))

(FPCore  (x y z t a b)
 :name "Numeric.SpecFunctions:incompleteBetaApprox from math-functions-0.1.5.2, B"
 (* x (exp (+ (* y (- (log z) t)) (* a (- (log (- 1.0 z)) b))))))

(FPCore  (x y z t a b)
 :name "Numeric.SpecFunctions:incompleteBetaWorker from math-functions-0.1.5.2, A"
 :herbie-target
 (if (< t -0.8845848504127471)
   (/ (* x (/ (pow a (- t 1.0)) y)) (- (+ b 1) (* y (log z))))
   (if (< t 852031.2288374073)
     (/ (* (/ x y) (pow a (- t 1.0))) (exp (- b (* (log z) y))))
     (/ (* x (/ (pow a (- t 1.0)) y)) (- (+ b 1) (* y (log z))))))
 (/ (* x (exp (- (+ (* y (log z)) (* (- t 1.0) (log a))) b))) y))

(FPCore  (x y z t)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, B"
 :herbie-target
 (-
  (*
   (- z)
   (+ (+ (* 0.5 (* y y)) y) (* (/ 1/3 (* 1.0 (* 1.0 1.0))) (* y (* y y)))))
  (- t (* x (log y))))
 (- (+ (* x (log y)) (* z (log (- 1.0 y)))) t))

(FPCore  (x y z t)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, C"
 :herbie-target
 (if (< (* x (- (/ y z) (/ t (- 1.0 z)))) -7.623226303312042e-196)
   (* x (- (/ y z) (* t (/ 1 (- 1.0 z)))))
   (if (< (* x (- (/ y z) (/ t (- 1.0 z)))) 1.4133944927702302e-211)
     (+ (/ (* y x) z) (- (/ (* t x) (- 1.0 z))))
     (* x (- (/ y z) (* t (/ 1 (- 1.0 z)))))))
 (* x (- (/ y z) (/ t (- 1.0 z)))))

(FPCore  (x)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, D"
 (- x (/ (+ 2.30753 (* x 0.27061)) (+ 1.0 (* (+ 0.99229 (* x 0.04481)) x)))))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, E"
 (+ (- 1.0 x) (* y (sqrt x))))

(FPCore  (x y)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, F"
 :herbie-target
 (if (< y -3.7311844206647956e+94)
   (/ (exp (/ -1 y)) x)
   (if (< y 2.817959242728288e+37)
     (/ (pow (/ x (+ y x)) x) x)
     (if (< y 2.347387415166998e+178)
       (log (exp (/ (pow (/ x (+ y x)) x) x)))
       (/ (exp (/ -1 y)) x))))
 (/ (exp (* x (log (/ x (+ x y))))) x))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, G"
 :herbie-target
 (if (< (/ y (+ z y)) 7.1154157597908e-315)
   (+ x (/ (exp (/ -1 z)) y))
   (+ x (/ (exp (log (pow (/ y (+ y z)) y))) y)))
 (+ x (/ (exp (* y (log (/ y (+ z y))))) y)))

(FPCore  (x)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, H"
 (/ (- (* x x) 3.0) 6.0))

(FPCore  (x y z t a b c)
 :name "Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, I"
 :herbie-target
 (if (< t -2.118326644891581e-50)
   (/
    x
    (+ x (* y (exp (* 2.0 (- (+ (* a c) (* 0.8333333333333334 c)) (* a b)))))))
   (if (< t 5.196588770651547e-123)
     (/
      x
      (+
       x
       (*
        y
        (exp
         (*
          2.0
          (/
           (-
            (* (* z (sqrt (+ t a))) (* (* 3.0 t) (- a (/ 5.0 6.0))))
            (*
             (- (* (+ (/ 5.0 6.0) a) (* 3.0 t)) 2.0)
             (* (- a (/ 5.0 6.0)) (* (- b c) t))))
           (* (* (* t t) 3.0) (- a (/ 5.0 6.0)))))))))
     (/
      x
      (+
       x
       (*
        y
        (exp
         (*
          2.0
          (-
           (/ (* z (sqrt (+ t a))) t)
           (* (- b c) (- (+ a (/ 5.0 6.0)) (/ 2.0 (* t 3.0))))))))))))
 (/
  x
  (+
   x
   (*
    y
    (exp
     (*
      2.0
      (-
       (/ (* z (sqrt (+ t a))) t)
       (* (- b c) (- (+ a (/ 5.0 6.0)) (/ 2.0 (* t 3.0)))))))))))

(FPCore  (x y z)
 :name "Numeric.SpecFunctions.Extra:bd0 from math-functions-0.1.5.2"
 :herbie-target
 (if (< y 7.595077799083773e-308)
   (- (* x (log (/ x y))) z)
   (- (* x (- (log x) (log y))) z))
 (- (* x (log (/ x y))) z))

(FPCore  (x y z t a b c i)
 :name "Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2"
 (/
  (+ (* (+ (* (+ (* (+ (* x y) z) y) 27464.7644705) y) 230661.510616) y) t)
  (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)))

(FPCore  (x y z t a)
 :name "Statistics.Math.RootFinding:ridders from math-functions-0.1.5.2"
 :herbie-target
 (if (< z -3.1921305903852764e+46)
   (- (* y x))
   (if (< z 5.976268120920894e+90)
     (/ (* x z) (/ (sqrt (- (* z z) (* a t))) y))
     (* y x)))
 (/ (* (* x y) z) (sqrt (- (* z z) (* t a)))))

(FPCore  (x y z)
 :name "Statistics.Distribution.Poisson.Internal:probability from math-functions-0.1.5.2"
 :herbie-target
 (exp (+ (- x z) (* (log y) y)))
 (exp (- (+ x (* y (log y))) z)))

(FPCore  (x)
 :name "Statistics.Distribution.Binomial:directEntropy from math-functions-0.1.5.2"
 (* x (log x)))

(FPCore  (x)
 :name "Statistics.Correlation.Kendall:numOfTiesBy from math-functions-0.1.5.2"
 :herbie-target
 (- (* x x) x)
 (* x (- x 1.0)))

(FPCore  (x y z)
 :name "Statistics.Sample:robustSumVarWeighted from math-functions-0.1.5.2"
 (+ x (* (* y z) z)))

(FPCore  (x y z)
 :name "Statistics.Sample:$swelfordMean from math-functions-0.1.5.2"
 (+ x (/ (- y x) z)))

(FPCore  (x y)
 :name "Statistics.Sample:$skurtosis from math-functions-0.1.5.2"
 :herbie-target
 (- (/ (/ x y) y) 3.0)
 (- (/ x (* y y)) 3.0))

(FPCore  (x y z t a b)
 :name "Statistics.Distribution.Beta:$centropy from math-functions-0.1.5.2"
 (+ (- (- x (* (- y 1.0) z)) (* (- t 1.0) a)) (* (- (+ y t) 2.0) b)))

(FPCore  (x y z)
 :name "Statistics.Distribution.Beta:$cvariance from math-functions-0.1.5.2"
 :herbie-target
 (if (< z 249.6182814532307)
   (/ (* y (/ x z)) (+ z (* z z)))
   (/ (* (/ (/ y z) (+ 1 z)) x) z))
 (/ (* x y) (* (* z z) (+ z 1.0))))

(FPCore  (x y z t)
 :name "Statistics.Distribution.Beta:$cdensity from math-functions-0.1.5.2"
 (- (+ (* (- x 1.0) (log y)) (* (- z 1.0) (log (- 1.0 y)))) t))

(FPCore  (x y)
 :name "Statistics.Distribution.Binomial:$cvariance from math-functions-0.1.5.2"
 (* (* x y) (- 1.0 y)))

(FPCore  (x y z)
 :name "Statistics.Distribution.Poisson:$clogProbability from math-functions-0.1.5.2"
 (- (- (* x (log y)) z) y))

(FPCore  (x y z)
 :name "Statistics.Distribution.CauchyLorentz:$cdensity from math-functions-0.1.5.2"
 :herbie-target
 (if (< (* y (+ 1.0 (* z z))) -inf.0)
   (/ (/ 1.0 y) (* (+ 1.0 (* z z)) x))
   (if (< (* y (+ 1.0 (* z z))) 8.680743250567252e+305)
     (/ (/ 1.0 x) (* (+ 1.0 (* z z)) y))
     (/ (/ 1.0 y) (* (+ 1.0 (* z z)) x))))
 (/ (/ 1.0 x) (* y (+ 1.0 (* z z)))))

(FPCore  (x y)
 :name "Examples.Basics.BasicTests:f3 from sbv-4.4"
 :herbie-target
 (+ (* x x) (+ (* y y) (* 2 (* y x))))
 (* (+ x y) (+ x y)))

(FPCore  (x y)
 :name "Examples.Basics.BasicTests:f2 from sbv-4.4"
 (- (* x x) (* y y)))

(FPCore  (x y)
 :name "Examples.Basics.BasicTests:f1 from sbv-4.4"
 (* (+ x y) (- x y)))

(FPCore  (x y)
 :name "Examples.Basics.ProofTests:f4 from sbv-4.4"
 :herbie-target
 (+ (* x x) (+ (* y y) (* (* x y) 2.0)))
 (+ (+ (* x x) (* (* x 2.0) y)) (* y y)))

(FPCore  (x y)
 :name "Numeric.LinearAlgebra.Util:formatSparse from hmatrix-0.16.1.5"
 (/ (fabs (- x y)) (fabs y)))

(FPCore  (x y)
 :name "Data.Random.Distribution.Normal:normalF from random-fu-0.2.6.2"
 (exp (* (* x y) y)))

(FPCore  (x y)
 :name "Data.Random.Distribution.Normal:normalTail from random-fu-0.2.6.2"
 :herbie-target
 (+ (+ y y) (* x x))
 (+ (+ (* x x) y) y))

(FPCore  (x)
 :name "Data.Random.Distribution.Normal:doubleStdNormalZ from random-fu-0.2.6.2"
 (- (+ x x) 1.0))

(FPCore  (x y)
 :name "Data.Random.Distribution.T:$ccdf from random-fu-0.2.6.2"
 :herbie-target
 (+ (* 1/2 (/ x y)) 1/2)
 (/ (+ x y) (+ y y)))

(FPCore  (x y z t)
 :name "Data.Random.Distribution.Triangular:triangularCDF from random-fu-0.2.6.2, A"
 (- 1.0 (/ x (* (- y z) (- y t)))))

(FPCore  (x y z t)
 :name "Data.Random.Distribution.Triangular:triangularCDF from random-fu-0.2.6.2, B"
 :herbie-target
 (if (< (/ x (* (- y z) (- t z))) 0.0)
   (/ (/ x (- y z)) (- t z))
   (* x (/ 1 (* (- y z) (- t z)))))
 (/ x (* (- y z) (- t z))))

(FPCore  (x)
 :name "Data.Random.Dice:roll from dice-0.1"
 (- (* x x) 1.0))

(FPCore  (x)
 :name "Prelude:atanh from fay-base-0.20.0.1"
 (/ (+ x 1.0) (- 1.0 x)))

(FPCore  (x)
 :name "ReportTypes:explainFloat from gipeda-0.1.2.1"
 :herbie-target
 0
 (* 100.0 (/ (- x x) x)))

(FPCore  (x y z t a)
 :name "Hakyll.Web.Tags:renderTagCloud from hakyll-4.7.2.3"
 (+ x (* (/ (- y z) (- (+ t 1.0) z)) (- a x))))

(FPCore  (x y z)
 :name "Data.Histogram.Bin.BinF:$cfromIndex from histogram-fill-0.8.4.1"
 (+ (+ (/ x 2.0) (* y x)) z))

(FPCore  (x y)
 :name "Data.Histogram.Bin.LogBinD:$cbinSizeN from histogram-fill-0.8.4.1"
 (- (* x y) x))

(FPCore  (x y z t a)
 :name "Numeric.Signal:interpolate   from hsignal-0.2.7.1"
 (+ x (* (- y z) (/ (- t x) (- a z)))))

(FPCore  (x y z t)
 :name "Numeric.Signal.Multichannel:$cget from hsignal-0.2.7.1"
 :herbie-target
 (if (< z 2.759456554562692e-282)
   (+ (* (/ x y) (- z t)) t)
   (if (< z 2.326994450874436e-110)
     (+ (* x (/ (- z t) y)) t)
     (+ (* (/ x y) (- z t)) t)))
 (+ (* (/ x y) (- z t)) t))

(FPCore  (x y z t)
 :name "Numeric.Signal.Multichannel:$cput from hsignal-0.2.7.1"
 :herbie-target
 (/ t (/ (- z y) (- x y)))
 (* (/ (- x y) (- z y)) t))

(FPCore  (x y)
 :name "Data.HyperLogLog.Config:hll from hyperloglog-0.3.4"
 (* (* x y) y))

(FPCore  (x y)
 :name "Data.HyperLogLog.Type:size from hyperloglog-0.3.4, A"
 :herbie-target
 (* x (log (- 1.0 (/ y x))))
 (* (* x 1.0) (log (- 1.0 (/ y x)))))

(FPCore  (x y)
 :name "Data.HyperLogLog.Type:size from hyperloglog-0.3.4, B"
 :herbie-target
 (if (< y 1.2973149052617803e-303)
   (* x (log (/ x y)))
   (/ x (/ 1 (- (log x) (log y)))))
 (* x (log (/ x y))))

(FPCore  (x y z)
 :name "Diagrams.Backend.Cairo.Internal:setTexture from diagrams-cairo-1.3.0.3"
 :herbie-target
 (if (< z -2.060202331921739e+104)
   (- x (/ (* z x) y))
   (if (< z 1.6939766013828526e+213) (/ x (/ y (- y z))) (* (- y z) (/ x y))))
 (/ (* x (- y z)) y))

(FPCore  (x y)
 :name "Numeric.Integration.TanhSinh:simpson  from integration-0.2.1"
 (* x (+ y y)))

(FPCore  (x y)
 :name "Numeric.Integration.TanhSinh:everywhere from integration-0.2.1"
 :herbie-target
 (+ x (* (* x y) y))
 (* x (+ 1.0 (* y y))))

(FPCore  (x y z t)
 :name "Data.Metrics.Snapshot:quantile from metrics-0.3.0.2"
 :herbie-target
 (+ x (+ (* t (- y z)) (* (- x) (- y z))))
 (+ x (* (- y z) (- t x))))

(FPCore  (x y)
 :name "Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendOutside from plot-0.2.3.4, A"
 :herbie-target
 (+ y (* 2 x))
 (+ (+ x y) x))

(FPCore  (x y z t)
 :name "Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendOutside from plot-0.2.3.4, B"
 (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5.0)))

(FPCore  (x y z)
 :name "Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendInside from plot-0.2.3.4"
 (+ (+ (+ (+ (+ x y) y) x) z) x))

(FPCore  (x y z)
 :name "Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendOutside from plot-0.2.3.4, C"
 :herbie-target
 (+ (* (+ x 5.0) z) (* x y))
 (+ (* x (+ y z)) (* z 5.0)))

(FPCore  (x y z t)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:tickPosition from plot-0.2.3.4"
 :herbie-target
 (if (< (* (- y x) (/ z t)) -1013646692435.8867)
   (+ x (/ (- y x) (/ t z)))
   (if (< (* (- y x) (/ z t)) -0.0)
     (+ x (/ (* (- y x) z) t))
     (+ x (/ (- y x) (/ t z)))))
 (+ x (* (- y x) (/ z t))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisLine from plot-0.2.3.4, A"
 :herbie-target
 (+ x (/ y (/ (- z a) (- z t))))
 (+ x (* y (/ (- z t) (- z a)))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisLine from plot-0.2.3.4, B"
 :herbie-target
 (if (< y -8.508084860551241e-17)
   (+ x (* y (/ (- z t) (- a t))))
   (if (< y 2.894426862792089e-49)
     (+ x (* (* y (- z t)) (/ 1 (- a t))))
     (+ x (* y (/ (- z t) (- a t))))))
 (+ x (* y (/ (- z t) (- a t)))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisTick from plot-0.2.3.4, A"
 :herbie-target
 (if (< t -1.0682974490174067e-39)
   (+ x (* (/ (- y z) (- a z)) t))
   (if (< t 3.9110949887586375e-141)
     (+ x (/ (* (- y z) t) (- a z)))
     (+ x (* (/ (- y z) (- a z)) t))))
 (+ x (/ (* (- y z) t) (- a z))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisTick from plot-0.2.3.4, B"
 :herbie-target
 (if (< (- (+ x y) (/ (* (- z t) y) (- a t))) -1.3664970889390727e-07)
   (- (+ y x) (* (* (- z t) (/ 1 (- a t))) y))
   (if (< (- (+ x y) (/ (* (- z t) y) (- a t))) 1.4754293444577233e-239)
     (/ (- (* y (- a z)) (* x t)) (- a t))
     (- (+ y x) (* (* (- z t) (/ 1 (- a t))) y))))
 (- (+ x y) (/ (* (- z t) y) (- a t))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisTicks from plot-0.2.3.4, A"
 :herbie-target
 (+ x (/ y (/ (- z a) (- z t))))
 (+ x (/ (* y (- z t)) (- z a))))

(FPCore  (x y z t a)
 :name "Graphics.Rendering.Plot.Render.Plot.Axis:renderAxisTicks from plot-0.2.3.4, B"
 :herbie-target
 (+ x (/ y (/ (- a t) (- z t))))
 (+ x (/ (* y (- z t)) (- a t))))

(FPCore  (x y z)
 :name "Data.Array.Repa.Algorithms.Pixel:doubleRmsOfRGB8 from repa-algorithms-3.4.0.1"
 :herbie-target
 (if (< z -6.396479394109776e+136)
   (/ (- z) (sqrt 3.0))
   (if (< z 7.320293694404182e+117)
     (/ (sqrt (+ (+ (* z z) (* x x)) (* y y))) (sqrt 3.0))
     (* (sqrt 0.3333333333333333) z)))
 (sqrt (/ (+ (+ (* x x) (* y y)) (* z z)) 3.0)))

(FPCore  (x y z)
 :name "Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, A"
 (+ 1.0 (/ (* 4.0 (- (+ x (* y 0.75)) z)) y)))

(FPCore  (x y z)
 :name "Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, B"
 :herbie-target
 (- (* 4.0 (/ x z)) (+ 2.0 (* 4.0 (/ y z))))
 (/ (* 4.0 (- (- x y) (* z 0.5))) z))

(FPCore  (x y z)
 :name "Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, C"
 (+ 1.0 (/ (* 4.0 (- (+ x (* y 0.25)) z)) y)))

(FPCore  (x)
 :name "Data.Spline.Key:interpolateKeys from smoothie-0.4.0.2"
 :herbie-target
 (* x (* x (- 3.0 (* x 2.0))))
 (* (* x x) (- 3.0 (* x 2.0))))

(FPCore  (x y z)
 :name "FRP.Yampa.Vector3:vector3Rho from Yampa-0.10.2"
 :herbie-target
 (if (< z -6.396479394109776e+136)
   (- z)
   (if (< z 7.320293694404182e+117) (sqrt (+ (+ (* z z) (* x x)) (* y y))) z))
 (sqrt (+ (+ (* x x) (* y y)) (* z z))))

(FPCore  (x y z t)
 :name "SynthBasics:moogVCF from YampaSynth-0.2"
 :herbie-target
 (+ x (* y (* z (- (tanh (/ t y)) (tanh (/ x y))))))
 (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))))
